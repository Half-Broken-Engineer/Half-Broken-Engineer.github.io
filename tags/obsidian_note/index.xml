<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>obsidian_note on 壊れかけのエンジニアのログ</title>
    <link>https://half-broken-engineer.github.io/tags/obsidian_note/</link>
    <description>Recent content in obsidian_note on 壊れかけのエンジニアのログ</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Tue, 27 Jun 2023 00:00:00 +0900</lastBuildDate><atom:link href="https://half-broken-engineer.github.io/tags/obsidian_note/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>DeepLearningDay4</title>
      <link>https://half-broken-engineer.github.io/converted/rabbitchallenge/deeplearningday4/</link>
      <pubDate>Tue, 27 Jun 2023 00:00:00 +0900</pubDate>
      
      <guid>https://half-broken-engineer.github.io/converted/rabbitchallenge/deeplearningday4/</guid>
      <description>実施内容と得点表 章タイトル 要点 実装演習 確認テストまたは考察 参考図書など関連記事レポート 強化学習 ◯ ◯ AlphaGo ◯ ◯ 軽量化・高速化技術 ◯ ◯ 応用技術 ◯ ◯ ◯ ResNet ◯ ◯ ◯ EfficientNet ◯ - - ◯ 物体検知と SS 解説 ◯ - - ◯ Mask R-CNN ◯ - - ◯ FCOS ◯ - - ◯ Transformer ◯ - - ◯ BERT ◯ ◯ ◯ ◯ GPT ◯ - - ◯ 音声認識 ◯ - - ◯ CTC ◯ - - DCGAN ◯ - - ◯ Conditinal GAN ◯ - - ◯ Pix2Pix ◯ - - ◯ A3C ◯ - - Metric-Learning ◯ - - MAML ◯ - - GCN ◯ - - ◯ CAM,Grad-CAM,LIME,SHAP ◯ ◯ - Docker ◯ - - 合計：４５ 基準：３６</description>
    </item>
    
    <item>
      <title>DeepLearningDay4</title>
      <link>https://half-broken-engineer.github.io/deeplearningday4/</link>
      <pubDate>Tue, 27 Jun 2023 00:00:00 +0900</pubDate>
      
      <guid>https://half-broken-engineer.github.io/deeplearningday4/</guid>
      <description>実施内容と得点表 章タイトル 要点 実装演習 確認テストまたは考察 参考図書など関連記事レポート 強化学習 ◯ ◯ AlphaGo ◯ ◯ 軽量化・高速化技術 ◯ ◯ 応用技術 ◯ ◯ ◯ ResNet ◯ ◯ ◯ EfficientNet ◯ - - ◯ 物体検知と SS 解説 ◯ - - ◯ Mask R-CNN ◯ - - ◯ FCOS ◯ - - ◯ Transformer ◯ - - ◯ BERT ◯ ◯ ◯ ◯ GPT ◯ - - ◯ 音声認識 ◯ - - ◯ CTC ◯ - - DCGAN ◯ - - ◯ Conditinal GAN ◯ - - ◯ Pix2Pix ◯ - - ◯ A3C ◯ - - Metric-Learning ◯ - - MAML ◯ - - GCN ◯ - - ◯ CAM,Grad-CAM,LIME,SHAP ◯ ◯ - Docker ◯ - - 合計：４５ 基準：３６</description>
    </item>
    
    <item>
      <title>DeepLearningDay3</title>
      <link>https://half-broken-engineer.github.io/converted/rabbitchallenge/deeplearningday3/</link>
      <pubDate>Wed, 29 Mar 2023 00:00:00 +0900</pubDate>
      
      <guid>https://half-broken-engineer.github.io/converted/rabbitchallenge/deeplearningday3/</guid>
      <description>再帰型NNの概念 再帰型NN→RNN
時系列データとは 時間的順序を追って一定間隔ごとに観察され、 相互に統計的依存関係が認められるようなデータの系列
時系列データの例 音声データ テキストデータ RNNの全体像 （講義スライドより引用）
$u^t = W_{(in)}x^t + W{z^{t-1}} + b$ $z^t = f(W_{(in)}x^t + Wz^{t-1} + b)$ $v^t = W_{(out)} z^t + c$ $y^t = g(W_{(out)} z^t + c)$
$W_{(in)}$：入力層から中間層への重み $W_{(out)}$：中間層から出力層への重み
u[:,t+1] = np.dot(X,W_in) + np.dot(z[:,t].reshape(1,-1),W) + b z[:,t+1] = functions.sigmoid(u[:,t+1]) v = np.dot(z[:,t+1].reshape(1,-1),W_out) y[:,t] = functions.sigmoid(v + c) ※実装上は1次元目がデータ列になるため、重みに対して左から入力を掛ける形になる。
RNNの特徴 初期の状態と過去の時間t-1の状態を保持し、そこから次の時間でのtを再帰的に求める再帰構造をもつ
BPTT (Back Propagation Through Time) BPの復習 誤差を微分のチェインルールに従って、誤差から逆算していくことで不要な再起的計算を避けて微分を算出できる。
BPTTの数学的記述 ※（パラメータ更新と合わせて、実装例と一致するように、数式展開で確認しながら表現変えてます） 誤差関数を3つの重みと２つのバイアスでそれぞれ微分する。</description>
    </item>
    
    <item>
      <title>DeepLearningDay3</title>
      <link>https://half-broken-engineer.github.io/deeplearningday3/</link>
      <pubDate>Wed, 29 Mar 2023 00:00:00 +0900</pubDate>
      
      <guid>https://half-broken-engineer.github.io/deeplearningday3/</guid>
      <description>再帰型NNの概念 再帰型NN→RNN
時系列データとは 時間的順序を追って一定間隔ごとに観察され、 相互に統計的依存関係が認められるようなデータの系列
時系列データの例 音声データ テキストデータ RNNの全体像 （講義スライドより引用）
$u^t = W_{(in)}x^t + W{z^{t-1}} + b$ $z^t = f(W_{(in)}x^t + Wz^{t-1} + b)$ $v^t = W_{(out)} z^t + c$ $y^t = g(W_{(out)} z^t + c)$
$W_{(in)}$：入力層から中間層への重み $W_{(out)}$：中間層から出力層への重み
u[:,t+1] = np.dot(X,W_in) + np.dot(z[:,t].reshape(1,-1),W) + b z[:,t+1] = functions.sigmoid(u[:,t+1]) v = np.dot(z[:,t+1].reshape(1,-1),W_out) y[:,t] = functions.sigmoid(v + c) ※実装上は1次元目がデータ列になるため、重みに対して左から入力を掛ける形になる。
RNNの特徴 初期の状態と過去の時間t-1の状態を保持し、そこから次の時間でのtを再帰的に求める再帰構造をもつ
BPTT (Back Propagation Through Time) BPの復習 誤差を微分のチェインルールに従って、誤差から逆算していくことで不要な再起的計算を避けて微分を算出できる。
BPTTの数学的記述 ※（パラメータ更新と合わせて、実装例と一致するように、数式展開で確認しながら表現変えてます） 誤差関数を3つの重みと２つのバイアスでそれぞれ微分する。</description>
    </item>
    
    <item>
      <title>DeepLearningDay2</title>
      <link>https://half-broken-engineer.github.io/converted/rabbitchallenge/deeplearningday2/</link>
      <pubDate>Sat, 25 Mar 2023 00:00:00 +0900</pubDate>
      
      <guid>https://half-broken-engineer.github.io/converted/rabbitchallenge/deeplearningday2/</guid>
      <description>要点(最低100字) 勾配消失問題 誤差逆伝播の復習 誤差から微分を逆算していくことで不要な再帰的計算を避けて微分を算出できる
確認問題１ 勾配消失問題の復習 誤差逆伝播が入力層に進んでいくに連れて勾配がどんどん減衰していくために パラメータ更新が入力層に近い側で進まなくなり、最適値に収束しなくなる現象
微分値の絶対値が１未満になると減衰していくことになる。
活性化関数の微分 $(1-sigmoid(x))\cdot sigmoid(x)$ シグモイド関数の微分は最大値が0.25であり、多層になると減衰が進んでいく。 （実装ノートより引用）
確認問題２ （２）
活性化関数による勾配消失対策 ReLU関数：勾配消失問題への対応とスパース化で貢献
（講義スライドより引用） 微分値は正の範囲で１，負の範囲で０
重みの初期化 Xavierの初期化 手法 正規分布での初期化値を一つ前の層のノード数で割る。（初期の方法でLeCunが提案したもの。） →各レイヤの出力の分散は「$n_{in} \times var_{in} \times var_{out}$」となるので、出力の分散を入力ノード数で割ることで分散を一定にできる。 逆伝播の方向も考慮した、入出力の平均値で割ってスケーリングするのが現在の方法
network[&amp;#39;W1&amp;#39;] = np.random.randn(input_layer_size, hidden_layer_size) / np.sqrt((input_layer_size+hidden_layer_size)/2) network[&amp;#39;W2&amp;#39;] = np.random.randn(hidden_layer_size, output_layer_size) / np.sqrt((hidden_layer_size+output_layer_size)/2) 対象の活性化関数 sigmoid 双曲線関数 ※Xavierの初期化は0近辺で線形近似できる前提をおいているので、ReLUには使えない。 効果 もともとSigmoidに対して、正規分布で初期化した際は活性化関数への入力が０から外れすぎることで出力が0か1に偏っていたのが、 分散を抑制することで0~1にうまくバラける様になった。
またネットワーク全体で見たときに各層の分散が一定に保たれる。
Heの初期化 手法 あるレイヤーを経た後の出力の分散は、ReLU を考慮すると、「1/2 × $n_{in}$ × 入力の分散 × 重みの分散」となります。そこで、Kaiming (He) 初期化では、重みを
として、標準偏差が $\sqrt{2/n_{in}}$ の正規分布によって初期化
network[&amp;#39;W1&amp;#39;] = np.random.randn(input_layer_size, hidden_layer_size) / np.</description>
    </item>
    
    <item>
      <title>DeepLearningDay2</title>
      <link>https://half-broken-engineer.github.io/deeplearningday2/</link>
      <pubDate>Sat, 25 Mar 2023 00:00:00 +0900</pubDate>
      
      <guid>https://half-broken-engineer.github.io/deeplearningday2/</guid>
      <description>要点(最低100字) 勾配消失問題 誤差逆伝播の復習 誤差から微分を逆算していくことで不要な再帰的計算を避けて微分を算出できる
確認問題１ 勾配消失問題の復習 誤差逆伝播が入力層に進んでいくに連れて勾配がどんどん減衰していくために パラメータ更新が入力層に近い側で進まなくなり、最適値に収束しなくなる現象
微分値の絶対値が１未満になると減衰していくことになる。
活性化関数の微分 $(1-sigmoid(x))\cdot sigmoid(x)$ シグモイド関数の微分は最大値が0.25であり、多層になると減衰が進んでいく。 （実装ノートより引用）
確認問題２ （２）
活性化関数による勾配消失対策 ReLU関数：勾配消失問題への対応とスパース化で貢献
（講義スライドより引用） 微分値は正の範囲で１，負の範囲で０
重みの初期化 Xavierの初期化 手法 正規分布での初期化値を一つ前の層のノード数で割る。（初期の方法でLeCunが提案したもの。） →各レイヤの出力の分散は「$n_{in} \times var_{in} \times var_{out}$」となるので、出力の分散を入力ノード数で割ることで分散を一定にできる。 逆伝播の方向も考慮した、入出力の平均値で割ってスケーリングするのが現在の方法
network[&amp;#39;W1&amp;#39;] = np.random.randn(input_layer_size, hidden_layer_size) / np.sqrt((input_layer_size+hidden_layer_size)/2) network[&amp;#39;W2&amp;#39;] = np.random.randn(hidden_layer_size, output_layer_size) / np.sqrt((hidden_layer_size+output_layer_size)/2) 対象の活性化関数 sigmoid 双曲線関数 ※Xavierの初期化は0近辺で線形近似できる前提をおいているので、ReLUには使えない。 効果 もともとSigmoidに対して、正規分布で初期化した際は活性化関数への入力が０から外れすぎることで出力が0か1に偏っていたのが、 分散を抑制することで0~1にうまくバラける様になった。
またネットワーク全体で見たときに各層の分散が一定に保たれる。
Heの初期化 手法 あるレイヤーを経た後の出力の分散は、ReLU を考慮すると、「1/2 × $n_{in}$ × 入力の分散 × 重みの分散」となります。そこで、Kaiming (He) 初期化では、重みを
として、標準偏差が $\sqrt{2/n_{in}}$ の正規分布によって初期化
network[&amp;#39;W1&amp;#39;] = np.random.randn(input_layer_size, hidden_layer_size) / np.</description>
    </item>
    
    <item>
      <title>Googleの猫</title>
      <link>https://half-broken-engineer.github.io/converted/g_certification/google%E3%81%AE%E7%8C%AB/</link>
      <pubDate>Wed, 01 Mar 2023 00:00:00 +0900</pubDate>
      
      <guid>https://half-broken-engineer.github.io/converted/g_certification/google%E3%81%AE%E7%8C%AB/</guid>
      <description>2012年、猫の概念とみられる画像の抽出</description>
    </item>
    
    <item>
      <title>WSC</title>
      <link>https://half-broken-engineer.github.io/converted/g_certification/wsc/</link>
      <pubDate>Wed, 01 Mar 2023 00:00:00 +0900</pubDate>
      
      <guid>https://half-broken-engineer.github.io/converted/g_certification/wsc/</guid>
      <description>WSC(WinogradSchemaChallenge)は類似した2対の文章から構成される代名詞照応解析のデータセットであり,人間には簡単に解けるが人工知能では従来の統語的手がかりだけでは解くのが困黄である特徴がある.</description>
    </item>
    
    <item>
      <title>アンサンブル学習</title>
      <link>https://half-broken-engineer.github.io/converted/g_certification/%E3%82%A2%E3%83%B3%E3%82%B5%E3%83%B3%E3%83%96%E3%83%AB%E5%AD%A6%E7%BF%92/</link>
      <pubDate>Wed, 01 Mar 2023 00:00:00 +0900</pubDate>
      
      <guid>https://half-broken-engineer.github.io/converted/g_certification/%E3%82%A2%E3%83%B3%E3%82%B5%E3%83%B3%E3%83%96%E3%83%AB%E5%AD%A6%E7%BF%92/</guid>
      <description> 目的：予測精度の向上 バイアス：真値と予測値の誤差 バリアンス：予測値の散らばり具合
メリットとデメリット メリット 弱学習器を使える 精度が上がる デメリット 構築に時間がかかる バイアスとバリアンスのトレードオフの調整が困難 主な種類 バギング 概要 全体から重複を許してランダムサンプリング(ブートストラップサンプリング )して それぞれのサンプルごとに個別のモデルを学習して
回帰なら平均値 分類なら多数決 の結果を全体の出力とする 主なモデルとしては ランダムフォレスト が上げられる (ブートストラップサンプリング – 【AI・機械学習用語集】より引用)
メリット 複数の弱学習器を使うことからバリアンスを抑えることができ、過学習を避けやすい 並列に処理できるため学習時間が短い デメリット 精度向上自体はブートストラップサンプリングの多様性に依存するため思った程は無い (注意点)データのサンプリングをしすぎると結局バリアンスが高くなってしまい過学習に繋がる可能性がある ブースティング 概要 バギングと異なりすべてのデータを利用する。 モデルの学習結果を受けてデータの重み付けを行い、 前のモデルの弱点を克服するモデルを順次学習して、 最終的に集計した結果を用いる。
(アンサンブル学習を超わかりやすく解説【機械学習入門30】より引用）
メリット モデルの弱点を克服するように学習していくのでバイアスが下がりやすい デメリット 同じデータを何度も使うため、過学習に陥りやすい スタッキング 概要 複数のモデルの結果を入力として学習するメタモデルを積み重ねていく手法 ２層より増やすこともある。 各モデルのバイアス、バリアンスのバランスを調整して最終的に高い精度を出すことができる。 メリット 様々な計算方法を目的に合わせて使用できるため、精度が上がりやすい デメリット 複数モデルを作り、その上でメタモデルも学習するので学習コストが大きい </description>
    </item>
    
    <item>
      <title>異常検知</title>
      <link>https://half-broken-engineer.github.io/converted/g_certification/%E7%95%B0%E5%B8%B8%E6%A4%9C%E7%9F%A5/</link>
      <pubDate>Wed, 01 Mar 2023 00:00:00 +0900</pubDate>
      
      <guid>https://half-broken-engineer.github.io/converted/g_certification/%E7%95%B0%E5%B8%B8%E6%A4%9C%E7%9F%A5/</guid>
      <description>検知したい異常が正解以外のもの→教師あり学習 外れ値、離れ値→教師無し学習</description>
    </item>
    
    <item>
      <title>階層的ニューラルネットワークと構造的ニューラルネットワーク</title>
      <link>https://half-broken-engineer.github.io/converted/g_certification/%E9%9A%8E%E5%B1%A4%E7%9A%84%E3%83%8B%E3%83%A5%E3%83%BC%E3%83%A9%E3%83%AB%E3%83%8D%E3%83%83%E3%83%88%E3%83%AF%E3%83%BC%E3%82%AF%E3%81%A8%E6%A7%8B%E9%80%A0%E7%9A%84%E3%83%8B%E3%83%A5%E3%83%BC%E3%83%A9%E3%83%AB%E3%83%8D%E3%83%83%E3%83%88%E3%83%AF%E3%83%BC%E3%82%AF/</link>
      <pubDate>Wed, 01 Mar 2023 00:00:00 +0900</pubDate>
      
      <guid>https://half-broken-engineer.github.io/converted/g_certification/%E9%9A%8E%E5%B1%A4%E7%9A%84%E3%83%8B%E3%83%A5%E3%83%BC%E3%83%A9%E3%83%AB%E3%83%8D%E3%83%83%E3%83%88%E3%83%AF%E3%83%BC%E3%82%AF%E3%81%A8%E6%A7%8B%E9%80%A0%E7%9A%84%E3%83%8B%E3%83%A5%E3%83%BC%E3%83%A9%E3%83%AB%E3%83%8D%E3%83%83%E3%83%88%E3%83%AF%E3%83%BC%E3%82%AF/</guid>
      <description>階層的ニューラルネットワーク：CNNなどのシュルちょくが一意に求まる確定的ニューラルネットと対応
構造的ニューラルネットワーク：ボルツマンマシンなど、出力が確率的な確率的ニューラルネットワークに対応
ボルツマンマシン：組み合わせ爆発問題に対応するために制限ボルツマンマシンが生まれた</description>
    </item>
    
    <item>
      <title>欠損値の種類</title>
      <link>https://half-broken-engineer.github.io/converted/g_certification/%E6%AC%A0%E6%90%8D%E5%80%A4%E3%81%AE%E7%A8%AE%E9%A1%9E/</link>
      <pubDate>Wed, 01 Mar 2023 00:00:00 +0900</pubDate>
      
      <guid>https://half-broken-engineer.github.io/converted/g_certification/%E6%AC%A0%E6%90%8D%E5%80%A4%E3%81%AE%E7%A8%AE%E9%A1%9E/</guid>
      <description>MCAR: Missing Completely At Random 欠損値になるかどうかが完全にランダム、なんの因子の影響も受けない。 とくにバイアスを引き起こすことはないが、実際のデータではあまり見られない。
MAR: Missing At Random ある因子が欠損値となるかどうかが、 その因子自体とは関係無いが、その他の因子とは関係がある場合です。
例えば、高齢であればある程収入に関するデータを報告しない(すなわち欠損)が、収入の高さは報告の有無に関係しない、といったケースです。
MNAR: Missing Not At Random 欠損値になるかどうかがその因子自体とも関係があるケース
例えば、収入が低ければ低いほど自分の収入を報告しない(収入の欠損値が収入と関連)、といったケースです。</description>
    </item>
    
    <item>
      <title>内部共変量シフト</title>
      <link>https://half-broken-engineer.github.io/converted/g_certification/%E5%86%85%E9%83%A8%E5%85%B1%E5%A4%89%E9%87%8F%E3%82%B7%E3%83%95%E3%83%88/</link>
      <pubDate>Wed, 01 Mar 2023 00:00:00 +0900</pubDate>
      
      <guid>https://half-broken-engineer.github.io/converted/g_certification/%E5%86%85%E9%83%A8%E5%85%B1%E5%A4%89%E9%87%8F%E3%82%B7%E3%83%95%E3%83%88/</guid>
      <description>共変量シフトとは、入力の分布が異なる現象を意味するが、機械学習やパターン認識の分野では訓練データのサンプリングと予測データの入力の分布に偏りがあり、アルゴリズムが対応できなくなることを指すことが多い。
単なる訓練データセットの中で、共変量シフトは普通の機械学習アルゴリズムではあまり議論されない。
DeepNetworkでは、深くなった隠れ層において各層とActivationごとに入力分布が変わってしまうことが問題となる。
この現象を内部の共変量シフト(internalCovariateShift)と呼んでいる。
バッチ正規化|バッチ正規化によって対策される。</description>
    </item>
    
    <item>
      <title>半教師あり学習</title>
      <link>https://half-broken-engineer.github.io/converted/g_certification/%E5%8D%8A%E6%95%99%E5%B8%AB%E3%81%82%E3%82%8A%E5%AD%A6%E7%BF%92/</link>
      <pubDate>Wed, 01 Mar 2023 00:00:00 +0900</pubDate>
      
      <guid>https://half-broken-engineer.github.io/converted/g_certification/%E5%8D%8A%E6%95%99%E5%B8%AB%E3%81%82%E3%82%8A%E5%AD%A6%E7%BF%92/</guid>
      <description>モデルの安定性向上
識別モデルと生成モデルに利用
利用できるデータの拡大</description>
    </item>
    
    <item>
      <title>project4_alpha_research_and_factor_modeling</title>
      <link>https://half-broken-engineer.github.io/converted/udacity_ai_for_trading/project4_alpha_research_and_factor_modeling/</link>
      <pubDate>Wed, 01 Feb 2023 00:00:00 +0900</pubDate>
      
      <guid>https://half-broken-engineer.github.io/converted/udacity_ai_for_trading/project4_alpha_research_and_factor_modeling/</guid>
      <description>OverViews
Overviews Methods Knowledge Factor Covariance Matrix $$F = \frac{1}{N-1} f \cdot f^T　\times annualization_factor$$
N：要素数 f：ファクターリターン annualization_factor:　252/days_passed
Actual Retrurn $$r_p = \sum_i^N \beta_i\times f_i + s_p$$
common return ファクターリターンとファクターエクスポージャの内積
ファクターリターンの計算 日付をインデックスとして、ティッカーをカラムとするreturnsがあるとき
from sklearn.decomposition import PCA model = PCA(n_components=num_factor) pca.fit(returns) factor_returns = pca.transform(returns) ファクターエクスポージャーの計算 from sklearn.linear_model import LinearRegression model = LinearRegression() model.fit(factor_returns,portfolio_actual_return) exposure = model.coef_ specific return 実際のリターンからコモンリターンを引いたあたいで、ファクターで説明されない部分のリターンを示す。
この値は小さくしたい</description>
    </item>
    
    <item>
      <title>project4_alpha_research_and_factor_modeling</title>
      <link>https://half-broken-engineer.github.io/project4_alpha_research_and_factor_modeling/</link>
      <pubDate>Wed, 01 Feb 2023 00:00:00 +0900</pubDate>
      
      <guid>https://half-broken-engineer.github.io/project4_alpha_research_and_factor_modeling/</guid>
      <description>OverViews
Overviews Methods Knowledge Factor Covariance Matrix $$F = \frac{1}{N-1} f \cdot f^T　\times annualization_factor$$
N：要素数 f：ファクターリターン annualization_factor:　252/days_passed
Actual Retrurn $$r_p = \sum_i^N \beta_i\times f_i + s_p$$
common return ファクターリターンとファクターエクスポージャの内積
ファクターリターンの計算 日付をインデックスとして、ティッカーをカラムとするreturnsがあるとき
from sklearn.decomposition import PCA model = PCA(n_components=num_factor) pca.fit(returns) factor_returns = pca.transform(returns) ファクターエクスポージャーの計算 from sklearn.linear_model import LinearRegression model = LinearRegression() model.fit(factor_returns,portfolio_actual_return) exposure = model.coef_ specific return 実際のリターンからコモンリターンを引いたあたいで、ファクターで説明されない部分のリターンを示す。
この値は小さくしたい</description>
    </item>
    
    <item>
      <title>AAAI</title>
      <link>https://half-broken-engineer.github.io/converted/g_certification/aaai/</link>
      <pubDate>Tue, 31 Jan 2023 00:00:00 +0900</pubDate>
      
      <guid>https://half-broken-engineer.github.io/converted/g_certification/aaai/</guid>
      <description>Presidental Panel on Long-Term AI Futures:2008-2009 AIの社会的課題について検討するサブグループにて予想される様々な倫理的問題、法律的課題について議論がなされた</description>
    </item>
    
    <item>
      <title>AIの活用に関する各国の経済成長戦略</title>
      <link>https://half-broken-engineer.github.io/converted/g_certification/ai%E3%81%AE%E6%B4%BB%E7%94%A8%E3%81%AB%E9%96%A2%E3%81%99%E3%82%8B%E5%90%84%E5%9B%BD%E3%81%AE%E7%B5%8C%E6%B8%88%E6%88%90%E9%95%B7%E6%88%A6%E7%95%A5/</link>
      <pubDate>Tue, 31 Jan 2023 00:00:00 +0900</pubDate>
      
      <guid>https://half-broken-engineer.github.io/converted/g_certification/ai%E3%81%AE%E6%B4%BB%E7%94%A8%E3%81%AB%E9%96%A2%E3%81%99%E3%82%8B%E5%90%84%E5%9B%BD%E3%81%AE%E7%B5%8C%E6%B8%88%E6%88%90%E9%95%B7%E6%88%A6%E7%95%A5/</guid>
      <description> 国 戦略 日本 新産業構造ビジョン 英国 RAS 2020 戦略 ドイツ デジタル戦略2025 中国 インターネットプラスAI3年行動実施法案 </description>
    </item>
    
    <item>
      <title>ARTIFICIAL_INTELLIGENCE_AUTOMATION,AND_THE_ECONOMY</title>
      <link>https://half-broken-engineer.github.io/converted/g_certification/artificial_intelligence_automationand_the_economy/</link>
      <pubDate>Tue, 31 Jan 2023 00:00:00 +0900</pubDate>
      
      <guid>https://half-broken-engineer.github.io/converted/g_certification/artificial_intelligence_automationand_the_economy/</guid>
      <description>AI の普及が最大で 300 万件越えの雇用に影響を与える可能性があることを説いている</description>
    </item>
    
    <item>
      <title>COPA</title>
      <link>https://half-broken-engineer.github.io/converted/g_certification/copa/</link>
      <pubDate>Tue, 31 Jan 2023 00:00:00 +0900</pubDate>
      
      <guid>https://half-broken-engineer.github.io/converted/g_certification/copa/</guid>
      <description>Choice of Plausible Alternatives
「知能を持つ」ことが事象間の因果関係を理解することだと捉え,これを計測しようとしたもの
前提となる文が与えられた際に、その文章から必然的に考えられる結果として適切な文章を選ばせる。
COPAは前提を示す文章に対し,2つの因果関係を示す選択肢のうち与えられた前提の正しい因果関係となる選択肢を選ぶタスクであり,人工知能の性能ベンチマークとして用いられる指標である.</description>
    </item>
    
    <item>
      <title>G検定間違った問題メモ</title>
      <link>https://half-broken-engineer.github.io/converted/g_certification/g%E6%A4%9C%E5%AE%9A%E9%96%93%E9%81%95%E3%81%A3%E3%81%9F%E5%95%8F%E9%A1%8C%E3%83%A1%E3%83%A2/</link>
      <pubDate>Tue, 31 Jan 2023 00:00:00 +0900</pubDate>
      
      <guid>https://half-broken-engineer.github.io/converted/g_certification/g%E6%A4%9C%E5%AE%9A%E9%96%93%E9%81%95%E3%81%A3%E3%81%9F%E5%95%8F%E9%A1%8C%E3%83%A1%E3%83%A2/</guid>
      <description>ドイツやEUにおいてはインターネット上のデータや著作物から学習用データを解析することは営利目的の場合まで含め著作権侵害には当たらない→日本の話しで誤り
インターネット上のデータ等の著作物から学習用データを解析することは営利目的の場合まで含め著作権侵書には当たらない
ドローンは150mより高い領域はNG、人とものとは30m以上離れること
AIの生成した創作物は、人の創作的寄与がある場合において著作物性が認められる。
GMNT：Googleの開発した現在機械翻訳の精度の評価の高いモデル。
バッチ正規化：2015年に提案。各層において、活性関数を掛ける前に伝播してきたデータを正規化する処理。正規化することで極端に小さな値をクリッピングできるので、勾配消失の解決例と考えられる。
(ア)に最もよくあてはまる選択肢を1つ選べ. 自然言語理においては,学際的な研究が進められている.その一つとして.,機械が知能を持っているか否かを判断することを目的とした知能テストが多数考案されており,常識推論タスクとして注目を浴びている.
常識推論タスクの著名なものの一つとして,南カリフォルニア大学のAndrewGordonの研究グループが提案したCOPA(Choice of Plausible Alternatives)というものがある.これは「知能を持つ」ことが事象間の因果関係を理解することだと捉え,これを計測しようとしたものである.
他の(ア)のタスクとしては,Ernest DavisとHector Levesqueの研究グループが定式化したWSCがあり,「統語的手がかりだけでは解けない ような照応解析の問題が解けること」が知能を持つこととしてこれをテストの形にした.現在てのテストはAIのトップ会議でコンペティションが開 かれるなどしており,まだまだ精度は低いものの注目を浴びつつある.
分類するのは入力データ
IBM社のWatsonのような知識ベースのシステムは,フレーム問題を避けられない.フレーム問題を乗り越えるためには,システム自体が生データからパターンをすることで,
自ら知識を獲得する必要がある.これは(オ)の登場で,(オ)アルゴリズムを組み込ま:ステムが,あたかも主観的にデータを判断し,回答を出力
する状態を可能にした.例えば,簡単な機械学習アルゴリズムであるナイーブベイズを組み込んだシステムでは,スパムメールを問題のおいメールと区別して隔部することが可能である.
しかし,ナイーブベイズのような簡単な機械学習アルゴリズムの人性能は,与えられたデータの(キ)に大きく依存する.(力)は,スパムメールに関する様々な(ク)と,種々の結果との間の(ケ)を学習することはできる.しかし,(ク)を(コ)する方法のよりよい改善などには寄与できない.
ディープラーニングでは観測データから本質的な情報を抽出した内部表現を学習する.内部表現は,潜在表現や特徴とも呼ぶことがある.内部表現には,特徴ベクトルと低次元表現がある.
深層信念ネットワークを一般的な順伝播型ニューラルネットワークに転換すると,多届であるにもかかわらず通常の学習方法でも過学習に陥ることなく学習が成功する.
次元削減を行うのは因子分析や主成分分析が存在する.因子分析は変量間に存在する潜在要因を探し出して次元削減を行う.
選択肢1:オートエンコーダーは入力データを目的変数とするため,教師なし学習ではない.
選択肢2:オートエンコーダーによる事前学習によってバッチ処理を高速化する効果はない-
選択肢3:特徴量の抽出により,事前学習が可能になる.
近年では,ベイズ最造化もハイパーパラメータの最適化の方法として注目されている.これ(は過去の試行結果から次に行う範囲を確率分布を用いて計算する手法である. 蒸留はモデルのパラメータを小さくする手法のーつである. ファインチューニング:既存のモデルの一部を利用して新たなモデルを解くために再学習する手法である.
チケット転売防止はブロックチェーンの事例
パラメータを求める方法→最小二乗法 パラメータを更新する方法→勾配降下法
DistBeliefはGoogleが開発した深層分散学習のフレームワークである.これは論文や出されていて深層分散学習の仕組みを理解できる. Hadoop:分散技術を用いたアプリケーションである. MapReduce:並列処理を行うためのプログラミングモデルである.
階層型クラスタリングに属する手法が、デンドログラムを用いて表現できる。 郡平均法
t-SNE　自由度１のｔ分布を用いて
新規ユーザーやサイトに新しく登録された情報の場合ユーザの好みを判断する情報が字しいため、適切な情報を推薦することができない問題のことをコールドスタート問題という
あらゆる物事に含まれる本質的な情報はごくわずかであるという仮定に基づき</description>
    </item>
    
    <item>
      <title>PREPARING_FOR_THE_FUTURE_OF_ARTIFICIAL_INTELLIGENCE</title>
      <link>https://half-broken-engineer.github.io/converted/g_certification/preparing_for_the_future_of_artificial_intelligence/</link>
      <pubDate>Tue, 31 Jan 2023 00:00:00 +0900</pubDate>
      
      <guid>https://half-broken-engineer.github.io/converted/g_certification/preparing_for_the_future_of_artificial_intelligence/</guid>
      <description>実務家や学生に対して倫理観が必要であることを主張している</description>
    </item>
    
    <item>
      <title>THE_NATIONAL_INTELLIGENCE_RESEARCH_AND_DEVELOPMENT_STRATEGIC_PLAN</title>
      <link>https://half-broken-engineer.github.io/converted/g_certification/the_national_intelligence_research_and_development_strategic_plan/</link>
      <pubDate>Tue, 31 Jan 2023 00:00:00 +0900</pubDate>
      
      <guid>https://half-broken-engineer.github.io/converted/g_certification/the_national_intelligence_research_and_development_strategic_plan/</guid>
      <description>判断結果の理由をユーザーに説明できる AI プログラムを開発することが必要であることを主張した</description>
    </item>
    
    <item>
      <title>アメリカのAI活用における倫理的リスク対策</title>
      <link>https://half-broken-engineer.github.io/converted/g_certification/%E3%82%A2%E3%83%A1%E3%83%AA%E3%82%AB%E3%81%AEai%E6%B4%BB%E7%94%A8%E3%81%AB%E3%81%8A%E3%81%91%E3%82%8B%E5%80%AB%E7%90%86%E7%9A%84%E3%83%AA%E3%82%B9%E3%82%AF%E5%AF%BE%E7%AD%96/</link>
      <pubDate>Tue, 31 Jan 2023 00:00:00 +0900</pubDate>
      
      <guid>https://half-broken-engineer.github.io/converted/g_certification/%E3%82%A2%E3%83%A1%E3%83%AA%E3%82%AB%E3%81%AEai%E6%B4%BB%E7%94%A8%E3%81%AB%E3%81%8A%E3%81%91%E3%82%8B%E5%80%AB%E7%90%86%E7%9A%84%E3%83%AA%E3%82%B9%E3%82%AF%E5%AF%BE%E7%AD%96/</guid>
      <description>AIの社会実装を進めていくにあたり,AIがもたらす倫理的リスクを事前に考慮しておく必要性が近年強く叫ばれている.各国政府はそれに対応すべく様々な取り組みを行っている.
アメリカ政府の例を取ると,
米国政府は2016年10月に&amp;quot;PREPARING_FOR_THE_FUTURE_OF_ARTIFICIAL_INTELLIGENCE&amp;ldquo;を発行し,
続けざまに同年&amp;rdquo;THE_NATIONAL_INTELLIGENCE_RESEARCH_AND_DEVELOPMENT_STRATEGIC_PLAN&amp;quot;,そして
2016年12月に発行した&amp;quot;ARTIFICIAL_INTELLIGENCE_AUTOMATION,AND_THE_ECONOMY&amp;ldquo;などで,これから表面化するであろうリスクへの対応築を事前に協議している.
AI（人工知能）技術の利用動向や制度政策動向【G検定にも役立つ】 - DIVE INTO VALUE</description>
    </item>
    
    <item>
      <title>音声認識</title>
      <link>https://half-broken-engineer.github.io/converted/g_certification/%E9%9F%B3%E5%A3%B0%E8%AA%8D%E8%AD%98/</link>
      <pubDate>Tue, 31 Jan 2023 00:00:00 +0900</pubDate>
      
      <guid>https://half-broken-engineer.github.io/converted/g_certification/%E9%9F%B3%E5%A3%B0%E8%AA%8D%E8%AD%98/</guid>
      <description>主要なモデル エルマンネットワーク：前の時刻の隠れノードの出力が現在の時刻の隠れノードのニュー力になる
要素 雑音・残響抑制（入力：音声、出力：音声）：音声を認識したい対象以外の雑音を分離する 音素状態認識（入力：音声、出力：音素）：音声の周波数スペクトル,すなわち音層特徴量をインプットとして,音素状態のカテゴリに分類する 音素モデル（入力：音素、出力：文字列）：音素がどの文字であるか特定する 単語辞書（入力：文字列、出力；単語）認識した文字列から単語を特定し認識する 言語モデル（入力：単語、出力：単語列）：単語系列仮説の尤度を評価する End to End:音響特徴量から音系,音率から文字列,文字列から単語列に直接変換して言語モデルを学習するアプローチ</description>
    </item>
    
    <item>
      <title>深層学習フレームワークの比較</title>
      <link>https://half-broken-engineer.github.io/converted/g_certification/%E6%B7%B1%E5%B1%A4%E5%AD%A6%E7%BF%92%E3%83%95%E3%83%AC%E3%83%BC%E3%83%A0%E3%83%AF%E3%83%BC%E3%82%AF%E3%81%AE%E6%AF%94%E8%BC%83/</link>
      <pubDate>Tue, 31 Jan 2023 00:00:00 +0900</pubDate>
      
      <guid>https://half-broken-engineer.github.io/converted/g_certification/%E6%B7%B1%E5%B1%A4%E5%AD%A6%E7%BF%92%E3%83%95%E3%83%AC%E3%83%BC%E3%83%A0%E3%83%AF%E3%83%BC%E3%82%AF%E3%81%AE%E6%AF%94%E8%BC%83/</guid>
      <description> Define and Run
Tensorflow:Google keras:tensorflowのラッパーのライブラリ Caffe:BVLC社 Define by Run Chainer :プリファードネットワーク社 Prefferd Network </description>
    </item>
    
    <item>
      <title>BPR</title>
      <link>https://half-broken-engineer.github.io/converted/g_certification/bpr/</link>
      <pubDate>Mon, 30 Jan 2023 00:00:00 +0900</pubDate>
      
      <guid>https://half-broken-engineer.github.io/converted/g_certification/bpr/</guid>
      <description>Business Process Re-engineering</description>
    </item>
    
    <item>
      <title>CRISP-DM</title>
      <link>https://half-broken-engineer.github.io/converted/g_certification/crisp-dm/</link>
      <pubDate>Mon, 30 Jan 2023 00:00:00 +0900</pubDate>
      
      <guid>https://half-broken-engineer.github.io/converted/g_certification/crisp-dm/</guid>
      <description> CRoss-Industry Standard Process for Data Miningの略 データマイニングのための産業横断型標準プロセスのこと。
データを分析することに主眼をおいて、以下の６つのステップで構成される。 大きな順序としての流れをたどりながら、ステップは相互に行ったり来たりする。
ビジネスの理解 データの理解 データの準備 モデリング 評価 展開 </description>
    </item>
    
    <item>
      <title>MLOps</title>
      <link>https://half-broken-engineer.github.io/converted/g_certification/mlops/</link>
      <pubDate>Mon, 30 Jan 2023 00:00:00 +0900</pubDate>
      
      <guid>https://half-broken-engineer.github.io/converted/g_certification/mlops/</guid>
      <description>&amp;ldquo;Hidden Technical Debt in Machine Learning Systems&amp;quot;という論文でAiモデル構築部分は全体AIプロジェクトの中で極めて小さいことが示され、全体をシームレスに連携させ、実際の本番環境でAIを活用するための仕組みやシステムなどが概念に横断的に組み込まれている。</description>
    </item>
    
    <item>
      <title>DeepLearningDay1</title>
      <link>https://half-broken-engineer.github.io/converted/rabbitchallenge/deeplearningday1/</link>
      <pubDate>Sat, 28 Jan 2023 00:00:00 +0900</pubDate>
      
      <guid>https://half-broken-engineer.github.io/converted/rabbitchallenge/deeplearningday1/</guid>
      <description>要点(最低100字) 識別と生成 識別：データを目的別クラスに分類する $P(C_k|x)$：条件Xが与えられた条件の元でのクラスkの確率 高次元から低次元へ 必要な学習データは比較的少ない 応用例 画像認識 生成：特定クラスのデータを生成する $P(x|C_k)$：クラスｋという条件のものとでのデータCkの分布 低次元から高次元へ 必要な学習データが多い 応用例 画像の超解像 テキスト生成 主要なモデル 識別モデル 決定木 ロジスティック回帰 SVM ニューラルネットワーク 生成モデル 隠れマルコフモデル ベイジアンネットワーク VAE GAN DRAW 識別器の開発アプローチ 上から順に学習コストが大→小
生成モデル的アプローチ ベイズの定理を活用 モデル化の対象 各クラスの生起確率 データのクラス条件付き密度 データを人工的に生成できる 確率的な識別 識別モデル 決定理論に基づき識別結果を得る データがクラスに属する確率をモデル化 確率的な識別 識別関数 入力値ｘを直接クラスに写像（変換）する関数f(x)を推定 データの属するクラス情報のみ（確率は計算されない） 決定的な識別 生成モデルと識別モデルの比較 生成モデルのアプローチではより複雑なデータ分布を学習しようとするので、計算量が多い。
（講義ビデオより引用）
識別モデルと識別関数 モデルは推論結果の取り扱いを変更でき、間違いの程度も評価できるが 識別関数ではそれらが出来ない。結果を一足飛びに得る。
（講義ビデオより引用）
深層学習の強み：万能近似定理 万能近似定理：活性化関数をもつネットワークを使うことで、どんな関数でも近似できるという定理 これまでの機械学習では人間が関数を設計していた ノーフリーランチの定理
ニューラルネットの数学的表現 (ラビットチャレンジの深層学習day1講義資料より引用)
回帰と分類の違い 回帰：連続する実数値を取る関数の近似 分類：離散的な結果を予想するための分析
線形と非線形の違い 線形な関数は以下の性質を持つが、非線形関数は持たない。
加法性:$f(a+b) = f(a) + f(b)$ 斉次性$f(ka) = k\times f(a)$ 活性化関数 ステップ関数 def step_func(x): if x &amp;gt; 0: return 1 else: return 0 問題点：線形分離可能なものしか学習出来なかった</description>
    </item>
    
    <item>
      <title>DeepLearningDay1</title>
      <link>https://half-broken-engineer.github.io/deeplearningday1/</link>
      <pubDate>Sat, 28 Jan 2023 00:00:00 +0900</pubDate>
      
      <guid>https://half-broken-engineer.github.io/deeplearningday1/</guid>
      <description>要点(最低100字) 識別と生成 識別：データを目的別クラスに分類する $P(C_k|x)$：条件Xが与えられた条件の元でのクラスkの確率 高次元から低次元へ 必要な学習データは比較的少ない 応用例 画像認識 生成：特定クラスのデータを生成する $P(x|C_k)$：クラスｋという条件のものとでのデータCkの分布 低次元から高次元へ 必要な学習データが多い 応用例 画像の超解像 テキスト生成 主要なモデル 識別モデル 決定木 ロジスティック回帰 SVM ニューラルネットワーク 生成モデル 隠れマルコフモデル ベイジアンネットワーク VAE GAN DRAW 識別器の開発アプローチ 上から順に学習コストが大→小
生成モデル的アプローチ ベイズの定理を活用 モデル化の対象 各クラスの生起確率 データのクラス条件付き密度 データを人工的に生成できる 確率的な識別 識別モデル 決定理論に基づき識別結果を得る データがクラスに属する確率をモデル化 確率的な識別 識別関数 入力値ｘを直接クラスに写像（変換）する関数f(x)を推定 データの属するクラス情報のみ（確率は計算されない） 決定的な識別 生成モデルと識別モデルの比較 生成モデルのアプローチではより複雑なデータ分布を学習しようとするので、計算量が多い。
（講義ビデオより引用）
識別モデルと識別関数 モデルは推論結果の取り扱いを変更でき、間違いの程度も評価できるが 識別関数ではそれらが出来ない。結果を一足飛びに得る。
（講義ビデオより引用）
深層学習の強み：万能近似定理 万能近似定理：活性化関数をもつネットワークを使うことで、どんな関数でも近似できるという定理 これまでの機械学習では人間が関数を設計していた ノーフリーランチの定理
ニューラルネットの数学的表現 (ラビットチャレンジの深層学習day1講義資料より引用)
回帰と分類の違い 回帰：連続する実数値を取る関数の近似 分類：離散的な結果を予想するための分析
線形と非線形の違い 線形な関数は以下の性質を持つが、非線形関数は持たない。
加法性:$f(a+b) = f(a) + f(b)$ 斉次性$f(ka) = k\times f(a)$ 活性化関数 ステップ関数 def step_func(x): if x &amp;gt; 0: return 1 else: return 0 問題点：線形分離可能なものしか学習出来なかった</description>
    </item>
    
    <item>
      <title>MachineLearning</title>
      <link>https://half-broken-engineer.github.io/converted/rabbitchallenge/machinelearning/</link>
      <pubDate>Thu, 26 Jan 2023 00:00:00 +0900</pubDate>
      
      <guid>https://half-broken-engineer.github.io/converted/rabbitchallenge/machinelearning/</guid>
      <description>要点(最低100字) 機械学習モデリングプロセス 問題設定 データ選定 前処理 機械学習モデル剪定 モデルの学習 モデルの評価 ルールベースと機械学習の比較 タスクTと性能指標Pがあるときに、性能が経験Eによって改善されるとき、 タスクTおよび性能指標Pに関して経験E から学習すると言われる
人がプログラムするのは学習の仕方　（認識の仕方では無い） ルールベースは認識の仕方自体をプログラムする。
主なモデル 教師あり学習 回帰 線形回帰・非線形回帰：最小二乗法、尤度最適化 分類 ロジスティック回帰；尤度最大化 最近傍・K-近傍アルゴリズム SVM：マージン最大化 教師なし学習 クラスタリング K-Means 次元削減 主成分分析：分散最大化 回帰問題 入力（説明変数、特徴量）から出力（目的変数）を予測する問題 一般的に、外挿問題（学習データに含まれない範囲の値域）での予測の精度が下がる。 どの学習方法でも共通。
線形回帰 線形とは→ざっくりというと比例。　n次元の超平面の方程式
直線、平面→線形回帰 曲線、局面→非線形
線形回帰に関連する値 教師データに含まれるもの 入力$\vec{x} = (x_1,x_2,\dots,x_m)^\top \in R^m$ 出力$y\in R$ 学習によって最適化していくもの パラメータ$\vec{w} = (w_1,w_2,\dots,w_m)^\top \in R^m$$ 切片$w_0$ 学習の際に使う値 予測値$\hat{y} = w_0 + \sum_{i=1}^n \vec{w}^\top \vec{x}$　（※データセットで考えるときは$\vec{\hat{y}} = X・\vec{w}$） 誤差$\epsilon = y - \hat{y}$ 線形回帰の最適化手法(最尤法) 最小２乗誤差　$MSE = \frac{1}{n_{train}}\sum(y-\hat{y})^2$ を用いて最適化する。 $\hat{\vec{w}} = arg \min_{w \in R^m} MSE$ MSEが最小値を取るとき</description>
    </item>
    
    <item>
      <title>MachineLearning</title>
      <link>https://half-broken-engineer.github.io/machinelearning/</link>
      <pubDate>Thu, 26 Jan 2023 00:00:00 +0900</pubDate>
      
      <guid>https://half-broken-engineer.github.io/machinelearning/</guid>
      <description>要点(最低100字) 機械学習モデリングプロセス 問題設定 データ選定 前処理 機械学習モデル剪定 モデルの学習 モデルの評価 ルールベースと機械学習の比較 タスクTと性能指標Pがあるときに、性能が経験Eによって改善されるとき、 タスクTおよび性能指標Pに関して経験E から学習すると言われる
人がプログラムするのは学習の仕方　（認識の仕方では無い） ルールベースは認識の仕方自体をプログラムする。
主なモデル 教師あり学習 回帰 線形回帰・非線形回帰：最小二乗法、尤度最適化 分類 ロジスティック回帰；尤度最大化 最近傍・K-近傍アルゴリズム SVM：マージン最大化 教師なし学習 クラスタリング K-Means 次元削減 主成分分析：分散最大化 回帰問題 入力（説明変数、特徴量）から出力（目的変数）を予測する問題 一般的に、外挿問題（学習データに含まれない範囲の値域）での予測の精度が下がる。 どの学習方法でも共通。
線形回帰 線形とは→ざっくりというと比例。　n次元の超平面の方程式
直線、平面→線形回帰 曲線、局面→非線形
線形回帰に関連する値 教師データに含まれるもの 入力$\vec{x} = (x_1,x_2,\dots,x_m)^\top \in R^m$ 出力$y\in R$ 学習によって最適化していくもの パラメータ$\vec{w} = (w_1,w_2,\dots,w_m)^\top \in R^m$$ 切片$w_0$ 学習の際に使う値 予測値$\hat{y} = w_0 + \sum_{i=1}^n \vec{w}^\top \vec{x}$　（※データセットで考えるときは$\vec{\hat{y}} = X・\vec{w}$） 誤差$\epsilon = y - \hat{y}$ 線形回帰の最適化手法(最尤法) 最小２乗誤差　$MSE = \frac{1}{n_{train}}\sum(y-\hat{y})^2$ を用いて最適化する。 $\hat{\vec{w}} = arg \min_{w \in R^m} MSE$ MSEが最小値を取るとき</description>
    </item>
    
    <item>
      <title>AppliedMathematics</title>
      <link>https://half-broken-engineer.github.io/converted/rabbitchallenge/appliedmathematics/</link>
      <pubDate>Wed, 25 Jan 2023 00:00:00 +0900</pubDate>
      
      <guid>https://half-broken-engineer.github.io/converted/rabbitchallenge/appliedmathematics/</guid>
      <description>要点(最低100字) 目次 線形代数 確率・統計 情報理論 線形代数 固有値・固有ベクトルの求め方 固有値分解とは 特異値・特位置ベクトルの概要 特異値分解について 固有値・固有ベクトル 固有ベクトルは対応する行列をかけた際に、ベクトルの方向が変わらないベクトル。 固有値は固有ベクトルに行列をかけたときに何倍になるかを示す。
$$A\vec{a}=\lambda\vec{a} \tag{1}$$ のとき、$\vec{a}$が固有ベクトル、λが固有値
求め方は固有方程式で固有値を求めたあと、固有値を（１）式に代入して連立方程式を解く。
固有ベクトルの大きさについては１にしておくのが一般的。（※後の特異値を求めるときにそちらのほうが都合が良い）
固有値分解 固有値ベクトルを列ベクトルに持つ行列Vと、対応する固有値を対角成分に持つ対角行列Λを用いて行列Aは以下の式に分解できる。
$$ A = V\Lambda V^{-1} \tag{2}$$
プログラミング的には、対角行列の演算負荷が低いことから、計算速度向上、リソース節約につながる。
import numpy as np values,vectors = np.linalg.eig(matrix) 特異値・特異ベクトル 固有値については正方行列のみしか扱えなかったが、これをm×nの行列に拡張したもの。
Uの列ベクトルを左特異ベクトル、、Vの列ベクトルを右特異ベクトルという。 Σの対角成分は特異値という。 ※このとき、ベクトルのノルムは１、σ&amp;gt;0,特異値の数はmin(m,n)となる。今回はｍ＜ｎとした。
$$ A = U\Sigma V^{\top} \tag{3}$$
$$A\vec{v}=\sigma\vec{u} \tag{4}$$
$$A^\top\vec{u}=\sigma\vec{v} \tag{5}$$ $\sum =$ $$ \begin{pmatrix} \sigma_{1} &amp;amp; 0 &amp;amp; \dots &amp;amp; &amp;amp; &amp;amp;0 \ 0&amp;amp;\sigma_{2}&amp;amp; 0 &amp;amp; \dots &amp;amp; &amp;amp;0\ 0 &amp;amp; 0 &amp;amp;\ddots&amp;amp;0 &amp;amp;\dots&amp;amp;\vdots\ \vdots&amp;amp;\dots&amp;amp;0&amp;amp;\sigma_m&amp;amp;0&amp;amp;\dots \end{pmatrix} $$</description>
    </item>
    
    <item>
      <title>AppliedMathematics</title>
      <link>https://half-broken-engineer.github.io/appliedmathematics/</link>
      <pubDate>Wed, 25 Jan 2023 00:00:00 +0900</pubDate>
      
      <guid>https://half-broken-engineer.github.io/appliedmathematics/</guid>
      <description>要点(最低100字) 目次 線形代数 確率・統計 情報理論 線形代数 固有値・固有ベクトルの求め方 固有値分解とは 特異値・特位置ベクトルの概要 特異値分解について 固有値・固有ベクトル 固有ベクトルは対応する行列をかけた際に、ベクトルの方向が変わらないベクトル。 固有値は固有ベクトルに行列をかけたときに何倍になるかを示す。
$$A\vec{a}=\lambda\vec{a} \tag{1}$$ のとき、$\vec{a}$が固有ベクトル、λが固有値
求め方は固有方程式で固有値を求めたあと、固有値を（１）式に代入して連立方程式を解く。
固有ベクトルの大きさについては１にしておくのが一般的。（※後の特異値を求めるときにそちらのほうが都合が良い）
固有値分解 固有値ベクトルを列ベクトルに持つ行列Vと、対応する固有値を対角成分に持つ対角行列Λを用いて行列Aは以下の式に分解できる。
$$ A = V\Lambda V^{-1} \tag{2}$$
プログラミング的には、対角行列の演算負荷が低いことから、計算速度向上、リソース節約につながる。
import numpy as np values,vectors = np.linalg.eig(matrix) 特異値・特異ベクトル 固有値については正方行列のみしか扱えなかったが、これをm×nの行列に拡張したもの。
Uの列ベクトルを左特異ベクトル、、Vの列ベクトルを右特異ベクトルという。 Σの対角成分は特異値という。 ※このとき、ベクトルのノルムは１、σ&amp;gt;0,特異値の数はmin(m,n)となる。今回はｍ＜ｎとした。
$$ A = U\Sigma V^{\top} \tag{3}$$
$$A\vec{v}=\sigma\vec{u} \tag{4}$$
$$A^\top\vec{u}=\sigma\vec{v} \tag{5}$$ $\sum =$ $$ \begin{pmatrix} \sigma_{1} &amp;amp; 0 &amp;amp; \dots &amp;amp; &amp;amp; &amp;amp;0 \ 0&amp;amp;\sigma_{2}&amp;amp; 0 &amp;amp; \dots &amp;amp; &amp;amp;0\ 0 &amp;amp; 0 &amp;amp;\ddots&amp;amp;0 &amp;amp;\dots&amp;amp;\vdots\ \vdots&amp;amp;\dots&amp;amp;0&amp;amp;\sigma_m&amp;amp;0&amp;amp;\dots \end{pmatrix} $$</description>
    </item>
    
    <item>
      <title>RabbitChallenge</title>
      <link>https://half-broken-engineer.github.io/converted/rabbitchallenge/rabbitchallenge/</link>
      <pubDate>Wed, 25 Jan 2023 00:00:00 +0900</pubDate>
      
      <guid>https://half-broken-engineer.github.io/converted/rabbitchallenge/rabbitchallenge/</guid>
      <description> ラビット★チャレンジ : よくある質問（受講者用）
修了要件 以下3つの条件をみたすことで修了者ナンバーを受領できる。受験の際にはそのナンバーが必要になる。
シラバス変更後も2年間は有効。
ビデオ学習 レポート全提出 認定テスト合格 実行環境 GoogleColaboratory
レポート作成 各章につき100文字以上で要点をまとめ、実装演習結果、確認テストについての自身の考察を入れる 各科目の基準点が足りない場合や、実装演習が不足する場合は差し戻し レポートは、「機械学習」「深層学習day1」等 科目ごとに１つのレポート レポートの確認（受理完了）は、約3～7営業日程いただいております。 ※修了認定間際のレポート提出は、万が一何か不備があった場合でも事務局からの差し戻しができず、 軽微なミスでも不合格となったり修了認定が出来なくなることがございます。 余裕を持った学習計画を立てた上で取り組みをお願いいたします。 形式：PDF 提出方法：各種レポート提出フォーム［PDF版］ラビット受講生専用 実装演習 基本的に実装演習コードにそって行う。
デバッグ Python主要エラーを参考にpythonコードはデバッグする。
参考サイト Stack overflow回答は英語。私はほとんどこれを読んで解決します Stack overflow(日本語)最近出てきた。まだ検索で引っかかることは少ない 質問してみても良いかも QA@IT日本語Q&amp;amp;Aサイト。見たことがない teratail【テラテイル】｜ITエンジニア特化型Q&amp;amp;Aサイト 日本のPythonコミュニティ - python.jp GIthubのIssue </description>
    </item>
    
    <item>
      <title>RabbitChallenge</title>
      <link>https://half-broken-engineer.github.io/rabbitchallenge/</link>
      <pubDate>Wed, 25 Jan 2023 00:00:00 +0900</pubDate>
      
      <guid>https://half-broken-engineer.github.io/rabbitchallenge/</guid>
      <description> ラビット★チャレンジ : よくある質問（受講者用）
修了要件 以下3つの条件をみたすことで修了者ナンバーを受領できる。受験の際にはそのナンバーが必要になる。
シラバス変更後も2年間は有効。
ビデオ学習 レポート全提出 認定テスト合格 実行環境 GoogleColaboratory
レポート作成 各章につき100文字以上で要点をまとめ、実装演習結果、確認テストについての自身の考察を入れる 各科目の基準点が足りない場合や、実装演習が不足する場合は差し戻し レポートは、「機械学習」「深層学習day1」等 科目ごとに１つのレポート レポートの確認（受理完了）は、約3～7営業日程いただいております。 ※修了認定間際のレポート提出は、万が一何か不備があった場合でも事務局からの差し戻しができず、 軽微なミスでも不合格となったり修了認定が出来なくなることがございます。 余裕を持った学習計画を立てた上で取り組みをお願いいたします。 形式：PDF 提出方法：各種レポート提出フォーム［PDF版］ラビット受講生専用 実装演習 基本的に実装演習コードにそって行う。
デバッグ Python主要エラーを参考にpythonコードはデバッグする。
参考サイト Stack overflow回答は英語。私はほとんどこれを読んで解決します Stack overflow(日本語)最近出てきた。まだ検索で引っかかることは少ない 質問してみても良いかも QA@IT日本語Q&amp;amp;Aサイト。見たことがない teratail【テラテイル】｜ITエンジニア特化型Q&amp;amp;Aサイト 日本のPythonコミュニティ - python.jp GIthubのIssue </description>
    </item>
    
    <item>
      <title>project7_combining_signals_for_enhanced_alpha</title>
      <link>https://half-broken-engineer.github.io/converted/udacity_ai_for_trading/project7_combining_signals_for_enhanced_alpha/</link>
      <pubDate>Tue, 24 Jan 2023 00:00:00 +0900</pubDate>
      
      <guid>https://half-broken-engineer.github.io/converted/udacity_ai_for_trading/project7_combining_signals_for_enhanced_alpha/</guid>
      <description>dollar volumeで半年の平均を取って、トップ５００を抽出 NYSEのカレンダー 終値を利用</description>
    </item>
    
    <item>
      <title>project7_combining_signals_for_enhanced_alpha</title>
      <link>https://half-broken-engineer.github.io/project7_combining_signals_for_enhanced_alpha/</link>
      <pubDate>Tue, 24 Jan 2023 00:00:00 +0900</pubDate>
      
      <guid>https://half-broken-engineer.github.io/project7_combining_signals_for_enhanced_alpha/</guid>
      <description>dollar volumeで半年の平均を取って、トップ５００を抽出 NYSEのカレンダー 終値を利用</description>
    </item>
    
    <item>
      <title>AlexNet</title>
      <link>https://half-broken-engineer.github.io/converted/g_certification/alexnet/</link>
      <pubDate>Sat, 21 Jan 2023 00:00:00 +0900</pubDate>
      
      <guid>https://half-broken-engineer.github.io/converted/g_certification/alexnet/</guid>
      <description>2012年のILSVRCにて他チームを圧倒する精度を出したネットワークモデル。 第三次AIブームの火付け役となった。
トロント大学ジェフリー・ヒントンが作成。
５層の畳み込み層と３層の全結合層。 過学習への対策に全結合層でのドロップアウトを使用している。
(ImageNet Classification with Deep Convolutional Neural Networksより引用)</description>
    </item>
    
    <item>
      <title>ILSVRC</title>
      <link>https://half-broken-engineer.github.io/converted/g_certification/ilsvrc/</link>
      <pubDate>Sat, 21 Jan 2023 00:00:00 +0900</pubDate>
      
      <guid>https://half-broken-engineer.github.io/converted/g_certification/ilsvrc/</guid>
      <description> 画像認識の精度を競うコンペティション
2010年に開始 2012年にニューラルネットワークを用いたモデル（AlexNet）がそれ以外と10％以上の差をつけて圧勝 2015年に人間の誤検知率4%を上回る精度を出す
著名なニューラルネットワークモデル AlexNet ：８層 GoogleNet：2014年 ２２層 ResNet：2015年残差ネットワーク、スキップコネクションを用いた超深層ネットワーク152層 </description>
    </item>
    
    <item>
      <title>オートエンコーダ</title>
      <link>https://half-broken-engineer.github.io/converted/g_certification/%E3%82%AA%E3%83%BC%E3%83%88%E3%82%A8%E3%83%B3%E3%82%B3%E3%83%BC%E3%83%80/</link>
      <pubDate>Sat, 21 Jan 2023 00:00:00 +0900</pubDate>
      
      <guid>https://half-broken-engineer.github.io/converted/g_certification/%E3%82%AA%E3%83%BC%E3%83%88%E3%82%A8%E3%83%B3%E3%82%B3%E3%83%BC%E3%83%80/</guid>
      <description>自己符号化器とも言われる。 入力と同じ出力を返す二層のネットワーク
隠れ層は入力の次元圧縮になる。
（猪狩 宇司; 今井 翔太; 江間 有沙; 岡田 陽介; 工藤 郁子; 巣籠 悠輔; 瀬谷 啓介; 徳田 有美子; 中澤 敏明; 藤本 敬介; 松井 孝之; 松尾 豊; 松嶋 達也; 山下 隆義. 深層学習教科書 ディープラーニング G検定（ジェネラリスト）公式テキスト 第2版 (Kindle の位置No.3985-3986). 株式会社 翔泳社. Kindle 版. ）</description>
    </item>
    
    <item>
      <title>ジェフリー・ヒントン</title>
      <link>https://half-broken-engineer.github.io/converted/g_certification/%E3%82%B8%E3%82%A7%E3%83%95%E3%83%AA%E3%83%BC%E3%83%92%E3%83%B3%E3%83%88%E3%83%B3/</link>
      <pubDate>Sat, 21 Jan 2023 00:00:00 +0900</pubDate>
      
      <guid>https://half-broken-engineer.github.io/converted/g_certification/%E3%82%B8%E3%82%A7%E3%83%95%E3%83%AA%E3%83%BC%E3%83%92%E3%83%B3%E3%83%88%E3%83%B3/</guid>
      <description>2006年に積層オートエンコーダによる逐次学習＝（事前学習）でニューラルネットの勾配消失問題に対応した。 2012のILSVRCでトロント大学のSuperVisionを率いてAlexNetで驚異的な精度を出した。</description>
    </item>
    
    <item>
      <title>ジョン・サール</title>
      <link>https://half-broken-engineer.github.io/converted/g_certification/%E3%82%B8%E3%83%A7%E3%83%B3%E3%82%B5%E3%83%BC%E3%83%AB/</link>
      <pubDate>Sat, 21 Jan 2023 00:00:00 +0900</pubDate>
      
      <guid>https://half-broken-engineer.github.io/converted/g_certification/%E3%82%B8%E3%83%A7%E3%83%B3%E3%82%B5%E3%83%BC%E3%83%AB/</guid>
      <description>1980年に強いAI、弱いAIという区分を提唱。 中国語の部屋という思考実験で、
○　弱いAI ✕　強いAI
弱いAIは実現可能でも強いAIは実現不可能と主張した。</description>
    </item>
    
    <item>
      <title>シンギュラリティ</title>
      <link>https://half-broken-engineer.github.io/converted/g_certification/%E3%82%B7%E3%83%B3%E3%82%AE%E3%83%A5%E3%83%A9%E3%83%AA%E3%83%86%E3%82%A3/</link>
      <pubDate>Sat, 21 Jan 2023 00:00:00 +0900</pubDate>
      
      <guid>https://half-broken-engineer.github.io/converted/g_certification/%E3%82%B7%E3%83%B3%E3%82%AE%E3%83%A5%E3%83%A9%E3%83%AA%E3%83%86%E3%82%A3/</guid>
      <description> 人工知能が十分に賢くなり、自分自身よりも賢い人工知能を作るようになった瞬間。 人間の想像の及ばない超越的な知性が誕生するという仮説。 2029年が人間より賢くなるとき、シンギュラリティは2045年
人工知能が人間を超えて文明の主役にとって代わる時点のことという意味でも使われる。 著名人のコメント 中立 レイ・カーツワイル：シンギュラリティは２０４５年に到来する ヒューゴ・デ・ガリス：２１世紀の後半にくるとし、このとき人工知能のち脳は人間の知能の１兆の１兆倍になると主張 ヴァーナー・ヴィンジ：シンギュラリティ＝機械が人間の役に立つふりをしなくなること 受容 オレン・エツィオーニ：１００万年後にシンギュラリティを迎える可能性はあるが、終末論的構想は馬鹿げている 否定的 スティーブン・ホーキング：AIの完成は人間の終焉を意味するかもしれない イーロン・マスク：シンギュラリティに危機感を持ち、非営利AI研究組織OpenAIを設立 ビル・ゲイツ </description>
    </item>
    
    <item>
      <title>シンボルグラウンディング問題</title>
      <link>https://half-broken-engineer.github.io/converted/g_certification/%E3%82%B7%E3%83%B3%E3%83%9C%E3%83%AB%E3%82%B0%E3%83%A9%E3%82%A6%E3%83%B3%E3%83%87%E3%82%A3%E3%83%B3%E3%82%B0%E5%95%8F%E9%A1%8C/</link>
      <pubDate>Sat, 21 Jan 2023 00:00:00 +0900</pubDate>
      
      <guid>https://half-broken-engineer.github.io/converted/g_certification/%E3%82%B7%E3%83%B3%E3%83%9C%E3%83%AB%E3%82%B0%E3%83%A9%E3%82%A6%E3%83%B3%E3%83%87%E3%82%A3%E3%83%B3%E3%82%B0%E5%95%8F%E9%A1%8C/</guid>
      <description>1990年にスティーブン・ハルナッドにより議論。
「記号とその対象が如何にして結びつくのか」という問題。</description>
    </item>
    
    <item>
      <title>ネオコグニトロン</title>
      <link>https://half-broken-engineer.github.io/converted/g_certification/%E3%83%8D%E3%82%AA%E3%82%B3%E3%82%B0%E3%83%8B%E3%83%88%E3%83%AD%E3%83%B3/</link>
      <pubDate>Sat, 21 Jan 2023 00:00:00 +0900</pubDate>
      
      <guid>https://half-broken-engineer.github.io/converted/g_certification/%E3%83%8D%E3%82%AA%E3%82%B3%E3%82%B0%E3%83%8B%E3%83%88%E3%83%AD%E3%83%B3/</guid>
      <description>&amp;ndash;
単純視細胞（S細胞）：画像の濃淡パターン(特徴)を検出する 複雑視細胞（C細胞）：特徴の位置が変動しても同一の特徴であるとみなす </description>
    </item>
    
    <item>
      <title>フレーム問題</title>
      <link>https://half-broken-engineer.github.io/converted/g_certification/%E3%83%95%E3%83%AC%E3%83%BC%E3%83%A0%E5%95%8F%E9%A1%8C/</link>
      <pubDate>Sat, 21 Jan 2023 00:00:00 +0900</pubDate>
      
      <guid>https://half-broken-engineer.github.io/converted/g_certification/%E3%83%95%E3%83%AC%E3%83%BC%E3%83%A0%E5%95%8F%E9%A1%8C/</guid>
      <description>1969年ジョン・マッカーシーによって提唱された問題。 人工知能研究における最大の難問と言われる。
今ある問題に関係のある事象だけを抽出することが難しい問題 ダニエル・デネットロボットのダイナマイト処理の話が有名。</description>
    </item>
    
    <item>
      <title>弱いAI</title>
      <link>https://half-broken-engineer.github.io/converted/g_certification/%E5%BC%B1%E3%81%84ai/</link>
      <pubDate>Sat, 21 Jan 2023 00:00:00 +0900</pubDate>
      
      <guid>https://half-broken-engineer.github.io/converted/g_certification/%E5%BC%B1%E3%81%84ai/</guid>
      <description>コンピュータは人間の心を持つ必要はなく、有用な道具であれば良い。
特定タスクのみに対応する特化型AIと同じような意味で使われることもある。</description>
    </item>
    
    <item>
      <title>身体性</title>
      <link>https://half-broken-engineer.github.io/converted/g_certification/%E8%BA%AB%E4%BD%93%E6%80%A7/</link>
      <pubDate>Sat, 21 Jan 2023 00:00:00 +0900</pubDate>
      
      <guid>https://half-broken-engineer.github.io/converted/g_certification/%E8%BA%AB%E4%BD%93%E6%80%A7/</guid>
      <description>知能が成立するためには身体が不可欠とする考え方。 「外界と相互作用できる身体が無いと、概念は捉え切れない」という考え方。 シンボルグラウンディング問題と関連付けられる。</description>
    </item>
    
    <item>
      <title>人工知能</title>
      <link>https://half-broken-engineer.github.io/converted/g_certification/%E4%BA%BA%E5%B7%A5%E7%9F%A5%E8%83%BD/</link>
      <pubDate>Sat, 21 Jan 2023 00:00:00 +0900</pubDate>
      
      <guid>https://half-broken-engineer.github.io/converted/g_certification/%E4%BA%BA%E5%B7%A5%E7%9F%A5%E8%83%BD/</guid>
      <description>コンピュータによる知的な情報処理システムを設計、または実現するための研究分野</description>
    </item>
    
    <item>
      <title>知識獲得のボトルネック</title>
      <link>https://half-broken-engineer.github.io/converted/g_certification/%E7%9F%A5%E8%AD%98%E7%8D%B2%E5%BE%97%E3%81%AE%E3%83%9C%E3%83%88%E3%83%AB%E3%83%8D%E3%83%83%E3%82%AF/</link>
      <pubDate>Sat, 21 Jan 2023 00:00:00 +0900</pubDate>
      
      <guid>https://half-broken-engineer.github.io/converted/g_certification/%E7%9F%A5%E8%AD%98%E7%8D%B2%E5%BE%97%E3%81%AE%E3%83%9C%E3%83%88%E3%83%AB%E3%83%8D%E3%83%83%E3%82%AF/</guid>
      <description>意味を正しく理解するためには膨大な一般常識が必要であり、 それ故にコンピュータが知識を獲得するのは難しいという問題。
ディープラーニングを用いた、ニューラル機械翻訳によってボトルネックを乗り越え、さらなる翻訳性能向上が期待されている。
専門家からの知識獲得が困難 知識ベースの保守が困難　：　一貫性の問題 常識的な知識の扱いが困難　：　暗黙的で明文化されていない　→　Cycプロジェクト
知識の共有や再利用の問題 →意味ネットワークやオントロジー
知識ベース構築のための必要情報 専門家　→　経験知で暗黙的であるため自発的に述べてもらうことが困難　→　インタビューシステムが研究された ドキュメント 事例 人工知能をめぐる動向
知識ベース</description>
    </item>
    
    <item>
      <title>中国語の部屋</title>
      <link>https://half-broken-engineer.github.io/converted/g_certification/%E4%B8%AD%E5%9B%BD%E8%AA%9E%E3%81%AE%E9%83%A8%E5%B1%8B/</link>
      <pubDate>Sat, 21 Jan 2023 00:00:00 +0900</pubDate>
      
      <guid>https://half-broken-engineer.github.io/converted/g_certification/%E4%B8%AD%E5%9B%BD%E8%AA%9E%E3%81%AE%E9%83%A8%E5%B1%8B/</guid>
      <description>ジョン・サールが強いAIが実現不可能だと説明するために用いた思考実験。</description>
    </item>
    
    <item>
      <title>特化型AI</title>
      <link>https://half-broken-engineer.github.io/converted/g_certification/%E7%89%B9%E5%8C%96%E5%9E%8Bai/</link>
      <pubDate>Sat, 21 Jan 2023 00:00:00 +0900</pubDate>
      
      <guid>https://half-broken-engineer.github.io/converted/g_certification/%E7%89%B9%E5%8C%96%E5%9E%8Bai/</guid>
      <description>限定された領域の課題に特化して自動的に学習、処理を行うAI。
弱いAIと同じような意味で使われることもある。
AlphaGoが有名</description>
    </item>
    
    <item>
      <title>Cycプロジェクト</title>
      <link>https://half-broken-engineer.github.io/converted/g_certification/cyc%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88/</link>
      <pubDate>Thu, 19 Jan 2023 00:00:00 +0900</pubDate>
      
      <guid>https://half-broken-engineer.github.io/converted/g_certification/cyc%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88/</guid>
      <description>すべての一般常識をコンピュータに取り込もうとするプロジェクト
ダグラス・レナートによって1984年からスタートし現在も継続中。</description>
    </item>
    
    <item>
      <title>is-aの関係</title>
      <link>https://half-broken-engineer.github.io/converted/g_certification/is-a%E3%81%AE%E9%96%A2%E4%BF%82/</link>
      <pubDate>Thu, 19 Jan 2023 00:00:00 +0900</pubDate>
      
      <guid>https://half-broken-engineer.github.io/converted/g_certification/is-a%E3%81%AE%E9%96%A2%E4%BF%82/</guid>
      <description> 継承関係を表す 矢印の向いている側が上位概念で、始点が下位概念 例外を指定しない限り上位概念の属性をすべて引き継ぐ
part-ofの関係と異なり、推移律が必ず成り立つ </description>
    </item>
    
    <item>
      <title>Mini-Max法</title>
      <link>https://half-broken-engineer.github.io/converted/g_certification/mini-max%E6%B3%95/</link>
      <pubDate>Thu, 19 Jan 2023 00:00:00 +0900</pubDate>
      
      <guid>https://half-broken-engineer.github.io/converted/g_certification/mini-max%E6%B3%95/</guid>
      <description>自分が指すときにスコアが最大(Max)になるように手を打っていく。 相手が指すときにスコアが最小(Mini)になるように手が打たれるはずという前提で戦略を立てる Min-Max法の枠組みの中で、探索をできるだけ減らす手法をαβ法という
ボードゲーム</description>
    </item>
    
    <item>
      <title>part-ofの関係</title>
      <link>https://half-broken-engineer.github.io/converted/g_certification/part-of%E3%81%AE%E9%96%A2%E4%BF%82/</link>
      <pubDate>Thu, 19 Jan 2023 00:00:00 +0900</pubDate>
      
      <guid>https://half-broken-engineer.github.io/converted/g_certification/part-of%E3%81%AE%E9%96%A2%E4%BF%82/</guid>
      <description> 矢印の始点は属性を示す。 全体と部分の関係を表し、推移律は必ずしも成立しない。 最低でも5種類以上の関係があることがわかっており、これをコンピュータに学習させることは難しく、現在も存在していない。 </description>
    </item>
    
    <item>
      <title>SHRDLU</title>
      <link>https://half-broken-engineer.github.io/converted/g_certification/shrdlu/</link>
      <pubDate>Thu, 19 Jan 2023 00:00:00 +0900</pubDate>
      
      <guid>https://half-broken-engineer.github.io/converted/g_certification/shrdlu/</guid>
      <description>テリー・ウィノグラードによって１９６８年～１９７０年にかけて開発されたプランニングのためのシステム。 英語による支持を受けて、コンピュータ画面に描かれる「積み木の世界」に存在する様々な物体を動かすことができた。 Cycプロジェクトにも引き継がれた。</description>
    </item>
    
    <item>
      <title>ボードゲーム</title>
      <link>https://half-broken-engineer.github.io/converted/g_certification/%E3%83%9C%E3%83%BC%E3%83%89%E3%82%B2%E3%83%BC%E3%83%A0/</link>
      <pubDate>Thu, 19 Jan 2023 00:00:00 +0900</pubDate>
      
      <guid>https://half-broken-engineer.github.io/converted/g_certification/%E3%83%9C%E3%83%BC%E3%83%89%E3%82%B2%E3%83%BC%E3%83%A0/</guid>
      <description>上から順に易しい問題 計算量が増大することで、単純な幅優先、深さ優先が効かなくなった。
コストを用いたMini-Max法などの枠組みで探索を効率化した。 一方で、コストを用いた方法の限界を超えるためにブルートフォースに基づくモンテカルロ法での解法も生まれた。
探索と推論</description>
    </item>
    
    <item>
      <title>オントロジー</title>
      <link>https://half-broken-engineer.github.io/converted/g_certification/%E3%82%AA%E3%83%B3%E3%83%88%E3%83%AD%E3%82%B8%E3%83%BC/</link>
      <pubDate>Thu, 19 Jan 2023 00:00:00 +0900</pubDate>
      
      <guid>https://half-broken-engineer.github.io/converted/g_certification/%E3%82%AA%E3%83%B3%E3%83%88%E3%83%AD%E3%82%B8%E3%83%BC/</guid>
      <description> 概念体系を記述するための方法論。 知識を体系化する方法論。
元は哲学用語で”存在論”（存在に関する体系的理論）という意味。 人工知能用語としては”概念化の明示的な仕様”　byトム・グルーパー
目的：知識の共有と活用 手段：語彙やその意味、関係性を明確な約束ごととして定義する
意味ネットワークでは記述方法についての約束ごとが無い。
（猪狩 宇司; 今井 翔太; 江間 有沙; 岡田 陽介; 工藤 郁子; 巣籠 悠輔; 瀬谷 啓介; 徳田 有美子; 中澤 敏明; 藤本 敬介; 松井 孝之; 松尾 豊; 松嶋 達也; 山下 隆義. 深層学習教科書 ディープラーニング G検定（ジェネラリスト）公式テキスト 第2版 株式会社 翔泳社. Kindle 版. より引用）
２つの構築方法 ヘビーウエイトオントロジー：Cycプロジェクト ライトウエイトオントロジー： </description>
    </item>
    
    <item>
      <title>コスト</title>
      <link>https://half-broken-engineer.github.io/converted/g_certification/%E3%82%B3%E3%82%B9%E3%83%88/</link>
      <pubDate>Thu, 19 Jan 2023 00:00:00 +0900</pubDate>
      
      <guid>https://half-broken-engineer.github.io/converted/g_certification/%E3%82%B3%E3%82%B9%E3%83%88/</guid>
      <description>各時点でのゲーム盤が持つそれぞれの状態が自分にとって有利か不利かを示すスコアをコストとする。 計算量の増大に対し、ヒューリスティックな知識（探索を効率化するのに有効な経験的な知識）を用いたコスト削減を目指した。 ⇒ゴールにたどりつく以外の中間の状態の表現
ボードゲーム</description>
    </item>
    
    <item>
      <title>セマンティックWeb</title>
      <link>https://half-broken-engineer.github.io/converted/g_certification/%E3%82%BB%E3%83%9E%E3%83%B3%E3%83%86%E3%82%A3%E3%83%83%E3%82%AFweb/</link>
      <pubDate>Thu, 19 Jan 2023 00:00:00 +0900</pubDate>
      
      <guid>https://half-broken-engineer.github.io/converted/g_certification/%E3%82%BB%E3%83%9E%E3%83%B3%E3%83%86%E3%82%A3%E3%83%83%E3%82%AFweb/</guid>
      <description> Webサイトが持つ意味をコンピュータに理解させ、 コンピュータ同士で処理させるための技術 </description>
    </item>
    
    <item>
      <title>ディープラーニングの社会実装に向けて</title>
      <link>https://half-broken-engineer.github.io/converted/g_certification/%E3%83%87%E3%82%A3%E3%83%BC%E3%83%97%E3%83%A9%E3%83%BC%E3%83%8B%E3%83%B3%E3%82%B0%E3%81%AE%E7%A4%BE%E4%BC%9A%E5%AE%9F%E8%A3%85%E3%81%AB%E5%90%91%E3%81%91%E3%81%A6/</link>
      <pubDate>Thu, 19 Jan 2023 00:00:00 +0900</pubDate>
      
      <guid>https://half-broken-engineer.github.io/converted/g_certification/%E3%83%87%E3%82%A3%E3%83%BC%E3%83%97%E3%83%A9%E3%83%BC%E3%83%8B%E3%83%B3%E3%82%B0%E3%81%AE%E7%A4%BE%E4%BC%9A%E5%AE%9F%E8%A3%85%E3%81%AB%E5%90%91%E3%81%91%E3%81%A6/</guid>
      <description>ディープラーニングの社会実装に向けて AI と社会 ビジネスで AI を活用する本質”経営課題を AI で解決し、利益を創出すること” ５日を１分で済ませるくらいの全体最適化が重要 法の遵守 倫理は価値に関する対話 実世界との関わり 現実世界（アナログ）と仮想世界（デジタル）をつなぐためには、現実世界で人の頭の中にだけあるものを IoT や RPA などでデジタル空間に移す必要がある デジタルで容易に情報を変換できる問題に対してはブロックチェーン技術などで改ざんから保護する必要がある。 AI システム開発 解くべく課題はなにか そもそも AI を使うべきなのか どこに AI を使うのか 使うデータはどう集めるのか、加工、分析、学習実装と評価方法は？ 実装後の運用や改善 社会的受容の想定 AI プロジェクトを計画する CRISP-DM CRoss-Industry Standard Process for Data Mining の略
データマイニングのための産業横断型標準プロセスのこと。
MLOps Machine Learning と Operations を合成した造語。 AI を本番環境で開発しながら運用するまでの概念。DevOps から派生。 システム運用開始後も継続してプロセスを回すことで、より推論性のが高く安定したシステムとすることが最も重要。
&amp;ldquo;Hidden Technical Debt in Machine Learning Systems&amp;rdquo; という論文で Ai モデル構築部分は全体 AI プロジェクトの中で極めて小さいことが示され、全体をシームレスに連携させ、実際の本番環境で AI を活用するための仕組みやシステムなどが概念に横断的に組み込まれている。
AIプロジェクトの進め方 検討すべきこと そもそもAIを活用すべきか、利益計画を立てて投資判断をする コストと推論精度のバランスを中長期的に見る必要がある ビジネス・技術上に組み込むべきデータのフィードバック機構をどのようなものにするか 初期から必要十分な推論精度を満たすことは稀、運用を継続しながら推論精度を上げていく ※AIは目的ではなく手段 AIを適用した場合のプロセスを再設計する もともと人が介在する前提だったプロセスを、 AIを利活用するプロセスに変更する必要があるため、BPRの必要が生まれる。</description>
    </item>
    
    <item>
      <title>ニューラルネットワーク</title>
      <link>https://half-broken-engineer.github.io/converted/g_certification/%E3%83%8B%E3%83%A5%E3%83%BC%E3%83%A9%E3%83%AB%E3%83%8D%E3%83%83%E3%83%88%E3%83%AF%E3%83%BC%E3%82%AF/</link>
      <pubDate>Thu, 19 Jan 2023 00:00:00 +0900</pubDate>
      
      <guid>https://half-broken-engineer.github.io/converted/g_certification/%E3%83%8B%E3%83%A5%E3%83%BC%E3%83%A9%E3%83%AB%E3%83%8D%E3%83%83%E3%83%88%E3%83%AF%E3%83%BC%E3%82%AF/</guid>
      <description> 1958年、フランク・ローゼンブラッドが提案した単純パーセプトロンが元祖。
ILSVRC(ImageNet Large Scale Cisual Recognition Challenge)において ジェフリー・ヒントンが率いるトロント大学のSuperVisionというチームが 2012年にニューラルネットを用いて圧勝して第三次AIブームにつながった。
目的 明示的なプログラムの代わりに、 中間層を用いて入力から目的とする出力値に変換する数学モデルを構築することが目的
数学的表現 (ラビットチャレンジの深層学習day1講義資料より引用)
最適化対象 重み バイアス </description>
    </item>
    
    <item>
      <title>ハノイの塔</title>
      <link>https://half-broken-engineer.github.io/converted/g_certification/%E3%83%8F%E3%83%8E%E3%82%A4%E3%81%AE%E5%A1%94/</link>
      <pubDate>Thu, 19 Jan 2023 00:00:00 +0900</pubDate>
      
      <guid>https://half-broken-engineer.github.io/converted/g_certification/%E3%83%8F%E3%83%8E%E3%82%A4%E3%81%AE%E5%A1%94/</guid>
      <description>（円盤１がある棒、円盤２がある棒、円盤３がある棒）の形式で表現して探索木をかく。 探索と推論</description>
    </item>
    
    <item>
      <title>ヘビーウエイトオントロジー</title>
      <link>https://half-broken-engineer.github.io/converted/g_certification/%E3%83%98%E3%83%93%E3%83%BC%E3%82%A6%E3%82%A8%E3%82%A4%E3%83%88%E3%82%AA%E3%83%B3%E3%83%88%E3%83%AD%E3%82%B8%E3%83%BC/</link>
      <pubDate>Thu, 19 Jan 2023 00:00:00 +0900</pubDate>
      
      <guid>https://half-broken-engineer.github.io/converted/g_certification/%E3%83%98%E3%83%93%E3%83%BC%E3%82%A6%E3%82%A8%E3%82%A4%E3%83%88%E3%82%AA%E3%83%B3%E3%83%88%E3%83%AD%E3%82%B8%E3%83%BC/</guid>
      <description>対象世界の知識をどのように記述すべきか哲学的にしっかりと考えて定めるもの 人間が関わることになるため、時間とコストがかかる
Cycプロジェクトなどが例に上がる。</description>
    </item>
    
    <item>
      <title>モンテカルロ法</title>
      <link>https://half-broken-engineer.github.io/converted/g_certification/%E3%83%A2%E3%83%B3%E3%83%86%E3%82%AB%E3%83%AB%E3%83%AD%E6%B3%95/</link>
      <pubDate>Thu, 19 Jan 2023 00:00:00 +0900</pubDate>
      
      <guid>https://half-broken-engineer.github.io/converted/g_certification/%E3%83%A2%E3%83%B3%E3%83%86%E3%82%AB%E3%83%AB%E3%83%AD%E6%B3%95/</guid>
      <description>計算量以外のゲーム盤の評価（スコア）に関する問題に対応するための手法。 過去の膨大な戦績からスコアを人間が決めていたが、 途中からスコアを用いずに、完全にランダムに指し続ける方法でゲームを終局までシミュレーションする。 ブルートフォースに属する方法で組み合わせが増えると立ち行かなくなる。
ボードゲーム</description>
    </item>
    
    <item>
      <title>ライトウエイトオントロジー</title>
      <link>https://half-broken-engineer.github.io/converted/g_certification/%E3%83%A9%E3%82%A4%E3%83%88%E3%82%A6%E3%82%A8%E3%82%A4%E3%83%88%E3%82%AA%E3%83%B3%E3%83%88%E3%83%AD%E3%82%B8%E3%83%BC/</link>
      <pubDate>Thu, 19 Jan 2023 00:00:00 +0900</pubDate>
      
      <guid>https://half-broken-engineer.github.io/converted/g_certification/%E3%83%A9%E3%82%A4%E3%83%88%E3%82%A6%E3%82%A8%E3%82%A4%E3%83%88%E3%82%AA%E3%83%B3%E3%83%88%E3%83%AD%E3%82%B8%E3%83%BC/</guid>
      <description>効率を重視し、とにかくコンピュータにデータを読み込ませて自動的に構成要素を作って行く。
完全に正しくなくても、使えれば良いという考え。
ウェブマイニングやデータマイニングで利用されている。 LODやセマンティックWebの研究として展開</description>
    </item>
    
    <item>
      <title>意味ネットワーク</title>
      <link>https://half-broken-engineer.github.io/converted/g_certification/%E6%84%8F%E5%91%B3%E3%83%8D%E3%83%83%E3%83%88%E3%83%AF%E3%83%BC%E3%82%AF/</link>
      <pubDate>Thu, 19 Jan 2023 00:00:00 +0900</pubDate>
      
      <guid>https://half-broken-engineer.github.io/converted/g_certification/%E6%84%8F%E5%91%B3%E3%83%8D%E3%83%83%E3%83%88%E3%83%AF%E3%83%BC%E3%82%AF/</guid>
      <description>心理学における構造モデルとして考案
概念のラベルのついたノードで表す is-aの関係やpart-ofの関係がある</description>
    </item>
    
    <item>
      <title>深さ優先探索</title>
      <link>https://half-broken-engineer.github.io/converted/g_certification/%E6%B7%B1%E3%81%95%E5%84%AA%E5%85%88%E6%8E%A2%E7%B4%A2/</link>
      <pubDate>Thu, 19 Jan 2023 00:00:00 +0900</pubDate>
      
      <guid>https://half-broken-engineer.github.io/converted/g_certification/%E6%B7%B1%E3%81%95%E5%84%AA%E5%85%88%E6%8E%A2%E7%B4%A2/</guid>
      <description>行き止まりまで行って、ゴールにつかなければ一つノードを戻って探索を行う。
メリット：一つ手前のノードに戻るだけなので、メモリ保持の要求が小さい デメリット：最短距離でゴールにつく解が必ずしも見つからない。ルート探索の時間がかかるケースがある 迷路・探索木</description>
    </item>
    
    <item>
      <title>人工知能とロボットの違い</title>
      <link>https://half-broken-engineer.github.io/converted/g_certification/%E4%BA%BA%E5%B7%A5%E7%9F%A5%E8%83%BD%E3%81%A8%E3%83%AD%E3%83%9C%E3%83%83%E3%83%88%E3%81%AE%E9%81%95%E3%81%84/</link>
      <pubDate>Thu, 19 Jan 2023 00:00:00 +0900</pubDate>
      
      <guid>https://half-broken-engineer.github.io/converted/g_certification/%E4%BA%BA%E5%B7%A5%E7%9F%A5%E8%83%BD%E3%81%A8%E3%83%AD%E3%83%9C%E3%83%83%E3%83%88%E3%81%AE%E9%81%95%E3%81%84/</guid>
      <description>人工知能とロボットの違い ロボットの脳にあたる部分が人工知能。 考える（知的な処理能力）という目に見えないものを中心に扱っている学問 ロボットの脳以外の部分を担当している研究者は人工知能の研究者ではない 人工知能とは
人工知能の定義</description>
    </item>
    
    <item>
      <title>人工知能のブームと冬の時代</title>
      <link>https://half-broken-engineer.github.io/converted/g_certification/%E4%BA%BA%E5%B7%A5%E7%9F%A5%E8%83%BD%E3%81%AE%E3%83%96%E3%83%BC%E3%83%A0%E3%81%A8%E5%86%AC%E3%81%AE%E6%99%82%E4%BB%A3/</link>
      <pubDate>Thu, 19 Jan 2023 00:00:00 +0900</pubDate>
      
      <guid>https://half-broken-engineer.github.io/converted/g_certification/%E4%BA%BA%E5%B7%A5%E7%9F%A5%E8%83%BD%E3%81%AE%E3%83%96%E3%83%BC%E3%83%A0%E3%81%A8%E5%86%AC%E3%81%AE%E6%99%82%E4%BB%A3/</guid>
      <description>人工知能のブームと冬の時代 第一次AIブーム 探索と推論の時代、１９５０年代後半～１９６０年代
第二次AIブーム 知識の時代　１９８０年代 エキスパートシステムと呼ばれる実用的なシステムがたくさん作られた。
第三次AIブーム ビッグデータを用いた人工知能が自ら知識を獲得する機械学習が 実用化。
G検定
人工知能とは
人工知能研究の歴史</description>
    </item>
    
    <item>
      <title>人工知能の定義</title>
      <link>https://half-broken-engineer.github.io/converted/g_certification/%E4%BA%BA%E5%B7%A5%E7%9F%A5%E8%83%BD%E3%81%AE%E5%AE%9A%E7%BE%A9/</link>
      <pubDate>Thu, 19 Jan 2023 00:00:00 +0900</pubDate>
      
      <guid>https://half-broken-engineer.github.io/converted/g_certification/%E4%BA%BA%E5%B7%A5%E7%9F%A5%E8%83%BD%E3%81%AE%E5%AE%9A%E7%BE%A9/</guid>
      <description>人工知能の定義 人工知能：１９５６年,ダートマス会議、ジョン・マッカーシー　推論、認識判断など、人間と同じ知的な処理能力を持つ機械・情報処理システムのこと 明確な定義はなく、専門家の中でも解釈が分かれる。
大まかな分類 レベル１～４
AI効果 知能に対する人間の評価
人工知能とロボットの違い 研究者の分け方 身体性、ロボットの部分が人工知能研究か</description>
    </item>
    
    <item>
      <title>人工知能研究の歴史</title>
      <link>https://half-broken-engineer.github.io/converted/g_certification/%E4%BA%BA%E5%B7%A5%E7%9F%A5%E8%83%BD%E7%A0%94%E7%A9%B6%E3%81%AE%E6%AD%B4%E5%8F%B2/</link>
      <pubDate>Thu, 19 Jan 2023 00:00:00 +0900</pubDate>
      
      <guid>https://half-broken-engineer.github.io/converted/g_certification/%E4%BA%BA%E5%B7%A5%E7%9F%A5%E8%83%BD%E7%A0%94%E7%A9%B6%E3%81%AE%E6%AD%B4%E5%8F%B2/</guid>
      <description>人工知能研究の歴史 世界初の汎用コンピュータ
ダートマス会議
人工知能のブームと冬の時代
シンギュラリティ</description>
    </item>
    
    <item>
      <title>人工知能分野の問題</title>
      <link>https://half-broken-engineer.github.io/converted/g_certification/%E4%BA%BA%E5%B7%A5%E7%9F%A5%E8%83%BD%E5%88%86%E9%87%8E%E3%81%AE%E5%95%8F%E9%A1%8C/</link>
      <pubDate>Thu, 19 Jan 2023 00:00:00 +0900</pubDate>
      
      <guid>https://half-broken-engineer.github.io/converted/g_certification/%E4%BA%BA%E5%B7%A5%E7%9F%A5%E8%83%BD%E5%88%86%E9%87%8E%E3%81%AE%E5%95%8F%E9%A1%8C/</guid>
      <description>人工知能分野の問題 フレーム問題 1969年　ジョン・マッカーシー 今ある問題と関係のある事柄だけを抽出することが困難
チューリングテスト アラン・チューリングによって提唱された知能の有無の判定を行うためのテスト。 ジョセフ・ワイゼンバウムによるELIZAが有名。 1991年以降ローブナーコンテストが毎年開催されているが、まだテストにパスしたものは無い。
強いAI、弱いAI 人間と同等の心を持つか、便利な道具であれば良いかという話。 提唱者ジョン・サールによって強いAIの実現可能性は否定されている。
シンボルグラウンディング問題 記号とそれが示す対象が如何にして結びつくのかという問題。
身体性 「外界と相互作用できる身体が無いと、概念は捉え切れない」という考え方。 シンボルグラウンディング問題と関連付けられる。
知識獲得のボトルネック 機械翻訳において、一つの文を訳すだけでも一般常識が無いと訳せないという 統計的機械翻訳の持つ問題点から、 膨大な一般常識をすべて扱うことが困難で、それ故にコンピュータが知識獲得をするのが難しいということを指す。
G検定</description>
    </item>
    
    <item>
      <title>推移律</title>
      <link>https://half-broken-engineer.github.io/converted/g_certification/%E6%8E%A8%E7%A7%BB%E5%BE%8B/</link>
      <pubDate>Thu, 19 Jan 2023 00:00:00 +0900</pubDate>
      
      <guid>https://half-broken-engineer.github.io/converted/g_certification/%E6%8E%A8%E7%A7%BB%E5%BE%8B/</guid>
      <description>推移律 とは AとBに関係が成り立っており、BとCに関係が成り立っていれば、AとCにも自動的に関係が成り立つ
is-aの関係では成り立つが、 part-ofの関係では成り立つとは限らない</description>
    </item>
    
    <item>
      <title>大まかな分類</title>
      <link>https://half-broken-engineer.github.io/converted/g_certification/%E5%A4%A7%E3%81%BE%E3%81%8B%E3%81%AA%E5%88%86%E9%A1%9E/</link>
      <pubDate>Thu, 19 Jan 2023 00:00:00 +0900</pubDate>
      
      <guid>https://half-broken-engineer.github.io/converted/g_certification/%E5%A4%A7%E3%81%BE%E3%81%8B%E3%81%AA%E5%88%86%E9%A1%9E/</guid>
      <description>大まかな分類 制御工学：すべての振る舞いがあらかじめ決められている 古典的人口知能：探索・推論、知識データを利用することで、状況に応じて複雑なふるまいをする 機械学習を取り入れた人口知能：多くのサンプルデータをもとに入力と出力の関係を学習したもの 深層学習を取り入れた人工知能：特徴量を自動的に学習するサービスや製品が該当 人工知能の定義</description>
    </item>
    
    <item>
      <title>探索と推論</title>
      <link>https://half-broken-engineer.github.io/converted/g_certification/%E6%8E%A2%E7%B4%A2%E3%81%A8%E6%8E%A8%E8%AB%96/</link>
      <pubDate>Thu, 19 Jan 2023 00:00:00 +0900</pubDate>
      
      <guid>https://half-broken-engineer.github.io/converted/g_certification/%E6%8E%A2%E7%B4%A2%E3%81%A8%E6%8E%A8%E8%AB%96/</guid>
      <description>探索と推論 迷路・探索木
ハノイの塔
ロボットの行動計画
ボードゲーム</description>
    </item>
    
    <item>
      <title>東ロボくん</title>
      <link>https://half-broken-engineer.github.io/converted/g_certification/%E6%9D%B1%E3%83%AD%E3%83%9C%E3%81%8F%E3%82%93/</link>
      <pubDate>Thu, 19 Jan 2023 00:00:00 +0900</pubDate>
      
      <guid>https://half-broken-engineer.github.io/converted/g_certification/%E6%9D%B1%E3%83%AD%E3%83%9C%E3%81%8F%E3%82%93/</guid>
      <description>2011~2016年。東大入試を目指すが読解力の問題で私大合格レベルで開発が凍結</description>
    </item>
    
    <item>
      <title>幅優先探索</title>
      <link>https://half-broken-engineer.github.io/converted/g_certification/%E5%B9%85%E5%84%AA%E5%85%88%E6%8E%A2%E7%B4%A2/</link>
      <pubDate>Thu, 19 Jan 2023 00:00:00 +0900</pubDate>
      
      <guid>https://half-broken-engineer.github.io/converted/g_certification/%E5%B9%85%E5%84%AA%E5%85%88%E6%8E%A2%E7%B4%A2/</guid>
      <description>メリット：最短距離でゴールにたどり着く解を必ず見つけられる デメリット：立ち寄ったすべてのノードを記憶するため、メモリ効率が悪い 迷路・探索木</description>
    </item>
    
    <item>
      <title>迷路・探索木</title>
      <link>https://half-broken-engineer.github.io/converted/g_certification/%E8%BF%B7%E8%B7%AF%E6%8E%A2%E7%B4%A2%E6%9C%A8/</link>
      <pubDate>Thu, 19 Jan 2023 00:00:00 +0900</pubDate>
      
      <guid>https://half-broken-engineer.github.io/converted/g_certification/%E8%BF%B7%E8%B7%AF%E6%8E%A2%E7%B4%A2%E6%9C%A8/</guid>
      <description>迷路・探索木 まずはコンピュータが解けるように、迷路⇒探索木への変換を行う。
幅優先探索 深さ優先探索 探索と推論</description>
    </item>
    
    <item>
      <title>機械学習</title>
      <link>https://half-broken-engineer.github.io/converted/g_certification/%E6%A9%9F%E6%A2%B0%E5%AD%A6%E7%BF%92/</link>
      <pubDate>Tue, 10 Jan 2023 00:00:00 +0900</pubDate>
      
      <guid>https://half-broken-engineer.github.io/converted/g_certification/%E6%A9%9F%E6%A2%B0%E5%AD%A6%E7%BF%92/</guid>
      <description>定義 「明示的にプログラムしなくても学習する能力をコンピュータに与える研究分野」　by アーサー・サミュエル
人工知能を実現するための具体的な手法のうち、 特に人間の学習能力、予測能力をコンピュータで実現しようとする技術や手法
流れ 基礎集計 データの前処理 学習 評価 学習と評価（検証）
種類 教師あり学習 回帰 線形回帰 ラッソ回帰：L1正則化項の追加 リッジ回帰：L2正則化項の追加 Elastic Net:ラッソ回帰＋リッジ回帰 分類 決定木 ランダムフォレスト SVM ロジスティック回帰：シグモイド関数を使った分類手法、他クラス分類においてはソフトマックス関数を使う kNN法 決定木 特徴量のうち、決定的なもの（情報量のゲインが大きいもの）から順に条件分岐をかけて、分類結果を得る
モデルの説明 各分岐でのジニ不純度の変化によって特徴量の重要度を説明する。
各種値の説明 用語 internal node:分岐のこと terminal node:決定木の底の分類の個数 depth:分岐条件の深さ ハイパーパラメータ maximum depth minimum number of samples to split minimum number of samples per leaf エントロピー 同時確率の二進対数を取って符号を逆転したものの平均値を取る。このときの単位はbit。
$$entropy=-p_1​log_2​(p_1​)-p_2​log_2​(p_2​)-&amp;hellip;-p_n​log_2​(p_n​)=-\sum_{i-1}^n​p_i​log_2​(p_i​)$$
情報量 エントロピーの逆符号。※基本的に対数の底は２ 情報量のゲインは親のエントロピーからこのエントロピーを引いたもの $plog_2(p)$
ジニ不純度 $G=\sum^{K}_{k=1}p(k)(1-p(k))$
cost complexity pruning $R_\alpha(T)=R(T)+\alpha|T|$
Where |T| is the number of leaves , R(T) is the sum of gini impurity of all leaves belonging to the tree.</description>
    </item>
    
  </channel>
</rss>
